{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/htmlposts/Linnia.html","path":"htmlposts/Linnia.html","modified":0,"renderable":0},{"_id":"source/htmlposts/README.md","path":"htmlposts/README.md","modified":0,"renderable":0},{"_id":"source/htmlposts/ens.html","path":"htmlposts/ens.html","modified":0,"renderable":0},{"_id":"source/htmlposts/ethereum.html","path":"htmlposts/ethereum.html","modified":0,"renderable":0},{"_id":"source/htmlposts/metropolis.html","path":"htmlposts/metropolis.html","modified":0,"renderable":0},{"_id":"source/htmlposts/solidity.html","path":"htmlposts/solidity.html","modified":0,"renderable":0},{"_id":"source/htmlposts/tokensale.html","path":"htmlposts/tokensale.html","modified":0,"renderable":0},{"_id":"source/htmlposts/web3.html","path":"htmlposts/web3.html","modified":0,"renderable":0},{"_id":"source/images/icon.png","path":"images/icon.png","modified":0,"renderable":0},{"_id":"source/images/id_architecture.png","path":"images/id_architecture.png","modified":0,"renderable":0},{"_id":"source/img/icon_wechat.png","path":"img/icon_wechat.png","modified":0,"renderable":0},{"_id":"source/htmlposts/img/dapp-arch","path":"htmlposts/img/dapp-arch","modified":0,"renderable":0},{"_id":"source/htmlposts/res/ledger.enc","path":"htmlposts/res/ledger.enc","modified":0,"renderable":0},{"_id":"themes/beantech/source/css/archive.styl","path":"css/archive.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/beantech.min.css","path":"css/beantech.min.css","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/beantech.css","path":"css/beantech.css","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/hux-blog.min.css","path":"css/hux-blog.min.css","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/signature.styl","path":"css/signature.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/rocket.styl","path":"css/rocket.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/toc.styl","path":"css/toc.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/widget.styl","path":"css/widget.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":0,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":0,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":0,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/hux-blog.js","path":"js/hux-blog.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/hux-blog.min.js","path":"js/hux-blog.min.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/jquery.nav.js","path":"js/jquery.nav.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"source/htmlposts/img/arch-dapp.png","path":"htmlposts/img/arch-dapp.png","modified":0,"renderable":0},{"_id":"source/htmlposts/img/parity.jpeg","path":"htmlposts/img/parity.jpeg","modified":0,"renderable":0},{"_id":"source/htmlposts/img/phising.png","path":"htmlposts/img/phising.png","modified":0,"renderable":0},{"_id":"source/htmlposts/img/social-crowdsale.jpg","path":"htmlposts/img/social-crowdsale.jpg","modified":0,"renderable":0},{"_id":"source/htmlposts/res/key.pem","path":"htmlposts/res/key.pem","modified":0,"renderable":0},{"_id":"source/htmlposts/res/key.pub","path":"htmlposts/res/key.pub","modified":0,"renderable":0},{"_id":"source/htmlposts/res/ledger.txt","path":"htmlposts/res/ledger.txt","modified":0,"renderable":0},{"_id":"source/htmlposts/res/pass.dec","path":"htmlposts/res/pass.dec","modified":0,"renderable":0},{"_id":"source/htmlposts/res/pass.enc","path":"htmlposts/res/pass.enc","modified":0,"renderable":0},{"_id":"source/htmlposts/res/pass.txt","path":"htmlposts/res/pass.txt","modified":0,"renderable":0},{"_id":"source/img/404-bg.jpg","path":"img/404-bg.jpg","modified":0,"renderable":0},{"_id":"themes/beantech/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/bootstrap.js","path":"js/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"source/htmlposts/img/pen.png","path":"htmlposts/img/pen.png","modified":0,"renderable":0},{"_id":"source/img/header_img/Iron-Man-3.jpg","path":"img/header_img/Iron-Man-3.jpg","modified":0,"renderable":0},{"_id":"source/img/ironman-draw.png","path":"img/ironman-draw.png","modified":0,"renderable":0},{"_id":"themes/beantech/source/css/bootstrap.css","path":"css/bootstrap.css","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/images/ironman.png","path":"css/images/ironman.png","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/images/rocket.png","path":"css/images/rocket.png","modified":0,"renderable":1},{"_id":"source/htmlposts/res/key/key.pem","path":"htmlposts/res/key/key.pem","modified":0,"renderable":0},{"_id":"source/htmlposts/res/key/key.pub","path":"htmlposts/res/key/key.pub","modified":0,"renderable":0},{"_id":"source/htmlposts/res/key/pass.dec","path":"htmlposts/res/key/pass.dec","modified":0,"renderable":0},{"_id":"source/htmlposts/res/key/pass.enc","path":"htmlposts/res/key/pass.enc","modified":0,"renderable":0},{"_id":"source/htmlposts/res/key/pass.txt","path":"htmlposts/res/key/pass.txt","modified":0,"renderable":0},{"_id":"source/htmlposts/res/keys/key.pub","path":"htmlposts/res/keys/key.pub","modified":0,"renderable":0},{"_id":"source/htmlposts/res/keys/key.pem","path":"htmlposts/res/keys/key.pem","modified":0,"renderable":0},{"_id":"source/htmlposts/res/keys/pass.dec","path":"htmlposts/res/keys/pass.dec","modified":0,"renderable":0},{"_id":"source/htmlposts/res/keys/pass.enc","path":"htmlposts/res/keys/pass.enc","modified":0,"renderable":0},{"_id":"source/htmlposts/res/keys/pass.txt","path":"htmlposts/res/keys/pass.txt","modified":0,"renderable":0},{"_id":"source/img/contact-bg.jpg","path":"img/contact-bg.jpg","modified":0,"renderable":0},{"_id":"source/img/signature/BeanTechSign-white.png","path":"img/signature/BeanTechSign-white.png","modified":0,"renderable":0},{"_id":"themes/beantech/source/js/jquery.js","path":"js/jquery.js","modified":0,"renderable":1},{"_id":"source/img/header_img/tf-logo-dark.png","path":"img/header_img/tf-logo-dark.png","modified":0,"renderable":0},{"_id":"source/img/signature/BeanTechSign-black.png","path":"img/signature/BeanTechSign-black.png","modified":0,"renderable":0},{"_id":"source/htmlposts/js/remark.jsl","path":"htmlposts/js/remark.jsl","modified":0,"renderable":0},{"_id":"source/img/beantech-desktop.png","path":"img/beantech-desktop.png","modified":0,"renderable":0},{"_id":"source/img/header_img/tag-bg.png","path":"img/header_img/tag-bg.png","modified":0,"renderable":0},{"_id":"source/img/header_img/home-bg-o.png","path":"img/header_img/home-bg-o.png","modified":0,"renderable":0},{"_id":"source/img/header_img/home-bg-2-dark.png","path":"img/header_img/home-bg-2-dark.png","modified":0,"renderable":0},{"_id":"source/img/header_img/archive-bg.png","path":"img/header_img/archive-bg.png","modified":0,"renderable":0}],"Cache":[{"_id":"themes/beantech/LICENSE","hash":"2b209f06bebeb2a8c2b7e187e436f3e1e1fbc8a7","modified":1507498176000},{"_id":"themes/beantech/_config.yml","hash":"a8a8180e7ffe897d6de9462bae2feb505043a779","modified":1507764851000},{"_id":"source/.DS_Store","hash":"a12a29d7feebb35000430d82a0a619d84fa121fa","modified":1512158056000},{"_id":"source/404.md","hash":"83c2c6d587beaa967a976e5969d60fa97fcdbe55","modified":1507498176000},{"_id":"source/CNAME","hash":"55d5b0b4757a7d65ee4966dd161f394d06d257b7","modified":1507498176000},{"_id":"source/_posts/Workshop-para-crear-una-DAO-Decentralized-Autonomous-Organization.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1507498462000},{"_id":"themes/beantech/languages_to_be_added/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1507498176000},{"_id":"themes/beantech/languages_to_be_added/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1507498176000},{"_id":"themes/beantech/languages_to_be_added/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1507498176000},{"_id":"themes/beantech/languages_to_be_added/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1507498176000},{"_id":"themes/beantech/languages_to_be_added/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1507498176000},{"_id":"themes/beantech/languages_to_be_added/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1507498176000},{"_id":"themes/beantech/languages_to_be_added/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1507498176000},{"_id":"themes/beantech/languages_to_be_added/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1507498176000},{"_id":"themes/beantech/languages_to_be_added/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1507498176000},{"_id":"themes/beantech/layout/404.ejs","hash":"a4d73541a53e56b7dd46249c6d27cb59f4d97422","modified":1507498176000},{"_id":"themes/beantech/layout/about.ejs","hash":"edcf8fa3bf7093c974d418ffef42ac89c19af128","modified":1507498176000},{"_id":"themes/beantech/layout/archive.ejs","hash":"72a150c8dff0031a9107d12eaa7c2e6c6ce950d2","modified":1507498176000},{"_id":"themes/beantech/layout/index.ejs","hash":"dc8a6eaa00d1e7c33a40979afe0953ed5d7b512e","modified":1507498176000},{"_id":"themes/beantech/layout/keynote.ejs","hash":"f5689862281e34dbe8402b0e72f632902e53e88b","modified":1507498176000},{"_id":"themes/beantech/layout/page.ejs","hash":"c90797e4394c5cb63c2515109480e766d04e486e","modified":1507498176000},{"_id":"themes/beantech/layout/layout.ejs","hash":"a5af5b99ac3456ab5da1a319455904b979b91601","modified":1507498176000},{"_id":"themes/beantech/layout/post.ejs","hash":"2d55684fc539dc281f9e2ec0409f09ea6ca43949","modified":1507498176000},{"_id":"themes/beantech/layout/tags.ejs","hash":"2c72eb2e89130658aa068d80d27b561b509c5dcd","modified":1507498176000},{"_id":"source/Daily-Readings/index.md","hash":"9a3d82ca36d394c3fdc727a04697ce1147f41cd3","modified":1517059172000},{"_id":"source/_posts/Analizando-DNS-para-descentralizarlo-con-DNS.md","hash":"860aebf1b9901ec72077c666a413cdb92dec62a7","modified":1507798799000},{"_id":"source/_posts/Blockchain-y-el-Problema-de-la-Identidad.md","hash":"19c87cc6748806c4a1fa0df0ada61d8194efbf78","modified":1507498462000},{"_id":"source/_posts/DEVCON2-El-Mauve-Paper-de-Ethereum.md","hash":"d93b2957764b044f8c7fbb1b501783c31a2073da","modified":1507498462000},{"_id":"source/_posts/ENS-Ethereum-Name-Service-en-detalle.md","hash":"17cc4304708d70de321e6b321a93efa00694d5fa","modified":1507498462000},{"_id":"source/_posts/curso-ethereum.md","hash":"5c8a405f956534491b755b3f933500f15eed4d4a","modified":1507498462000},{"_id":"source/Readings/index.md","hash":"86af7800681b9efba156bb15d4d8d381497e8b38","modified":1517059453000},{"_id":"source/about/index.md","hash":"351cfe1c3132dcb4eb2ed1496a98773fc69a5f7e","modified":1507498462000},{"_id":"source/archive/index.md","hash":"279ff19668395f5c6b26417da99d2c1f3ecd5886","modified":1507498176000},{"_id":"source/htmlposts/.DS_Store","hash":"a3d7e46ce7d2b87108c4ee2b84dc701683dd035b","modified":1507498462000},{"_id":"source/htmlposts/Linnia.html","hash":"f976150d09b08d20e6786ec4fe4bd1b7fef99d82","modified":1513001168000},{"_id":"source/htmlposts/README.md","hash":"ba9c8fd8bf4b6374b899f9bcebc648e05a63b9ca","modified":1507498462000},{"_id":"source/htmlposts/ens.html","hash":"a966d77eb3b679a92ac003f8312d2d2f4e4da819","modified":1507498462000},{"_id":"source/htmlposts/ethereum.html","hash":"9c33d51ec0bfb67ba05682188ed4c3477bf9d46b","modified":1511454795000},{"_id":"source/htmlposts/metropolis.html","hash":"b3db63baea0220060e1592552923631dcfa59c42","modified":1513001279000},{"_id":"source/htmlposts/solidity.html","hash":"1027169d365b6e1b3da451cdfe8d19067152af6b","modified":1507498462000},{"_id":"source/htmlposts/tokensale.html","hash":"6cd6461d1b5a3f057617c989f641bad482b9d6c5","modified":1513538981000},{"_id":"source/htmlposts/web3.html","hash":"762efabfde65a73acdf9089898e7ca5437b9b0fb","modified":1507498462000},{"_id":"source/tags/index.md","hash":"9d558ce28d0d44c3463517088689bbca44bbb364","modified":1507498176000},{"_id":"source/images/icon.png","hash":"61ba0ed4d1a5396b8da14e2078534db1bfc1f669","modified":1507498462000},{"_id":"source/images/.DS_Store","hash":"72dbeecb1c4d1820bf7fa7faf6089eccc33acc6a","modified":1507498462000},{"_id":"source/images/id_architecture.png","hash":"ec9b7d28671b3b8408cdae8dfd6cf349e806943a","modified":1507498462000},{"_id":"source/img/icon_wechat.png","hash":"4188058026609de06c6cac88b349a2da831a1783","modified":1507498176000},{"_id":"source/htmlposts/img/dapp-arch","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1507498462000},{"_id":"source/htmlposts/res/ledger.enc","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1507498462000},{"_id":"themes/beantech/layout/_partial/footer.ejs","hash":"c31863b1fa66fd915bc4913440be6c610d12af80","modified":1507498176000},{"_id":"themes/beantech/layout/_partial/head.ejs","hash":"235b68d2f489b30accc1d3a7afb1d2e208a872b1","modified":1507716535000},{"_id":"themes/beantech/layout/_partial/header.ejs","hash":"b0bfc38d64a80f3115c16f336b006607ea9f28d1","modified":1507767862000},{"_id":"themes/beantech/layout/_partial/pagination.ejs","hash":"557d6bb069a1d48af49ae912994653f44b32a570","modified":1507498176000},{"_id":"themes/beantech/layout/_partial/sidebar.ejs","hash":"2e4e528a555917b2a267da4db2440bcc4a7a65ab","modified":1507498176000},{"_id":"themes/beantech/layout/_partial/toc.ejs","hash":"837f01e8a20e5023b4b292d1b3141a399567da65","modified":1507498176000},{"_id":"themes/beantech/layout/_partial/nav.ejs","hash":"4c905166c960852e9b9a3c9d5c680091e37b481f","modified":1507498176000},{"_id":"themes/beantech/layout/_widget/featured-tags.ejs","hash":"0c9ce1942f1943dc8891a9302a922ef1ffe300c5","modified":1507498176000},{"_id":"themes/beantech/layout/_widget/category.ejs","hash":"1cf485def07dc06e870dc9613767c6c614bcf428","modified":1507498176000},{"_id":"themes/beantech/layout/_widget/archive.ejs","hash":"7594929d472806ca4c64d9906d9903a96de111a0","modified":1507498176000},{"_id":"themes/beantech/layout/_widget/friends-blog.ejs","hash":"734d3775017aedac185028924baf890a71a74548","modified":1507498176000},{"_id":"themes/beantech/layout/_widget/recent-posts.ejs","hash":"e08ab8ba60e31638006acf27f066b989a0a3c433","modified":1507498176000},{"_id":"themes/beantech/layout/_widget/short-about.ejs","hash":"3b10bd768f6ef30a42b1703fbc9a88627f9bfdf1","modified":1507498176000},{"_id":"themes/beantech/source/css/archive.styl","hash":"715bcbd085eb95ec26c9805c11c374919cde971c","modified":1507498176000},{"_id":"themes/beantech/source/css/beantech.min.css","hash":"05a06230b1a9eca0b30cece54a397008cb77dc50","modified":1507498176000},{"_id":"themes/beantech/source/css/beantech.css","hash":"4c361354fd8e9851923fb21a620bc079380ebcd8","modified":1507498176000},{"_id":"themes/beantech/source/css/highlight.styl","hash":"e842080e6d580f0f70a7df71fbde3c4e49463c19","modified":1507498176000},{"_id":"themes/beantech/source/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1507498176000},{"_id":"themes/beantech/source/css/signature.styl","hash":"88159b31c59d59c01a0b534af57242662a2a3969","modified":1507498176000},{"_id":"themes/beantech/source/css/rocket.styl","hash":"e15c51c8566ecd943112e57592888dd318b6fa6a","modified":1507498176000},{"_id":"themes/beantech/source/css/toc.styl","hash":"6c9a2d5f6f981624e0c4b64323493e8614efea29","modified":1507498176000},{"_id":"themes/beantech/source/css/widget.styl","hash":"7a9f735f5ef323dc2950fbd9d76daa16c9a0f1a9","modified":1507498176000},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1507498176000},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1507498176000},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1507498176000},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1507498176000},{"_id":"themes/beantech/source/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1507498176000},{"_id":"themes/beantech/source/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1507498176000},{"_id":"themes/beantech/source/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1507498176000},{"_id":"themes/beantech/source/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1507498176000},{"_id":"themes/beantech/source/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1507498176000},{"_id":"themes/beantech/source/js/toc.js","hash":"41e52551731854224c249d53010c1bae5aa92ffa","modified":1507498176000},{"_id":"themes/beantech/source/js/totop.js","hash":"c05360f6fc699ac12e794b1764b4a952713a3017","modified":1507498176000},{"_id":"source/_posts/curso-ethereum/Weather-Sun-icon.png","hash":"79ccc16d1f0eb2c1022c010b9402e6c85c71925b","modified":1507498462000},{"_id":"source/htmlposts/img/.DS_Store","hash":"38098b2a7abdef108718f3af5c6df5d391344220","modified":1507498462000},{"_id":"source/htmlposts/img/arch-dapp.png","hash":"097e122eb6a6c24db30722f4d1f38ecd13854c7b","modified":1507498462000},{"_id":"source/htmlposts/img/parity.jpeg","hash":"76e807d9734bd5ecbb3b45af27a546cb71cac58e","modified":1507498462000},{"_id":"source/htmlposts/img/phising.png","hash":"dff5e79d8e30eb02130ba7dc137465ba69ce30fb","modified":1507498462000},{"_id":"source/htmlposts/img/social-crowdsale.jpg","hash":"a96ead3c50a9241221db02c98b383e436ebb5d1d","modified":1507498462000},{"_id":"source/htmlposts/res/key.pem","hash":"fec129f1c974172c615ab59a1b0f4bfe3861a448","modified":1507498462000},{"_id":"source/htmlposts/res/key.pub","hash":"31574bdb0655ef738b1e6af7068a3702f9c10554","modified":1507498462000},{"_id":"source/htmlposts/res/ledger.txt","hash":"6921c0b9b1f37ac0e69d3b03faf744e870e3887f","modified":1507498462000},{"_id":"source/htmlposts/res/pass.dec","hash":"4b192d71fa8f9d28d3a4e6d6937ea8301e8707a3","modified":1507498462000},{"_id":"source/htmlposts/res/pass.enc","hash":"43c7a61b75a0ff401c1e080e07fc594793dc000e","modified":1507498462000},{"_id":"source/htmlposts/res/pass.txt","hash":"4b192d71fa8f9d28d3a4e6d6937ea8301e8707a3","modified":1507498462000},{"_id":"source/img/404-bg.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1507498176000},{"_id":"themes/beantech/source/css/bootstrap.min.css","hash":"fec7b176a4b9a67c0eb5d184f57b84297efc23aa","modified":1507498176000},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1507498176000},{"_id":"themes/beantech/source/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1507498176000},{"_id":"themes/beantech/source/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1507498176000},{"_id":"source/_posts/curso-ethereum/Title.png","hash":"3eb9cccc3f67fba283464425f64ab5d7f241bf63","modified":1507498462000},{"_id":"source/htmlposts/img/pen.png","hash":"ea6944f3704281b17a9449f115e985f999c174f2","modified":1507498462000},{"_id":"source/img/header_img/Iron-Man-3.jpg","hash":"62a9a76854503c327990cc8d10de293ab6e9588f","modified":1507498176000},{"_id":"source/img/ironman-draw.png","hash":"7d6a06b4b544ab146c3b3e8474edc33f14ac6e4d","modified":1507498176000},{"_id":"themes/beantech/source/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1507498176000},{"_id":"themes/beantech/source/css/images/ironman.png","hash":"2f0db0ab15d466c4065d9f6102fdf829726d9e3f","modified":1507498176000},{"_id":"themes/beantech/source/css/images/rocket.png","hash":"6dee0406955aa9b7a261161d30f2538a671e806b","modified":1507498176000},{"_id":"source/htmlposts/res/key/key.pem","hash":"9328c2228db5057d73f2e70ce0d6ee1fffd5e604","modified":1507498462000},{"_id":"source/htmlposts/res/key/key.pub","hash":"49f6d52fc8ef86c0181c4eb5b29207eef33fe860","modified":1507498462000},{"_id":"source/htmlposts/res/key/pass.dec","hash":"4b192d71fa8f9d28d3a4e6d6937ea8301e8707a3","modified":1507498462000},{"_id":"source/htmlposts/res/key/pass.enc","hash":"2217929279bac9fb2695a7388361b938e2777c9e","modified":1507498462000},{"_id":"source/htmlposts/res/key/pass.txt","hash":"4b192d71fa8f9d28d3a4e6d6937ea8301e8707a3","modified":1507498462000},{"_id":"source/htmlposts/res/keys/key.pub","hash":"919a102be25fddfc8c3655155adac90478e22052","modified":1507498462000},{"_id":"source/htmlposts/res/keys/key.pem","hash":"60774119ba02344417c6d75684a46cd72551caea","modified":1507498462000},{"_id":"source/htmlposts/res/keys/pass.dec","hash":"4b192d71fa8f9d28d3a4e6d6937ea8301e8707a3","modified":1507498462000},{"_id":"source/htmlposts/res/keys/pass.enc","hash":"3f22c4d2f8410a8e1f852a0a3ccc287c1b48942b","modified":1507498462000},{"_id":"source/htmlposts/res/keys/pass.txt","hash":"4b192d71fa8f9d28d3a4e6d6937ea8301e8707a3","modified":1507498462000},{"_id":"source/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1507498176000},{"_id":"source/img/signature/BeanTechSign-white.png","hash":"34289ed41cf9ddac2d56be46fbb1515b7d5913cd","modified":1507498176000},{"_id":"themes/beantech/source/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1507498176000},{"_id":"source/img/header_img/tf-logo-dark.png","hash":"5c7bf8ade9de134f8c77a3c59e575abe9fc6cdd4","modified":1507498176000},{"_id":"source/img/signature/BeanTechSign-black.png","hash":"94b7102e819fd6ee082d3fb0166f4de7458c22ff","modified":1507498176000},{"_id":"source/htmlposts/js/remark.jsl","hash":"e50ae2485924aefd58b273117b2df2b74449e0b9","modified":1507498462000},{"_id":"source/img/beantech-desktop.png","hash":"4a8f8b209c9db8fd5209f15b8e4590525e258b0f","modified":1507498176000},{"_id":"source/img/header_img/tag-bg.png","hash":"e83cd7b04ff85bcbc9bd3ebf5e57a55166e82568","modified":1507498176000},{"_id":"source/img/header_img/home-bg-o.png","hash":"134ece4cb4c49c7ca1403a5afe7f46d0e2f9ecbb","modified":1507498176000},{"_id":"source/img/header_img/home-bg-2-dark.png","hash":"da6a3d5ca787bdc25e69655abd879b4f821aeb30","modified":1507498176000},{"_id":"source/img/header_img/archive-bg.png","hash":"6bf9c224543ec54e250309db89cbdf46e0c4b5ba","modified":1507498176000}],"Category":[],"Data":[],"Page":[{"layout":"404","description":"你来到了没有知识的荒原 :(","header-img":"img/404-bg.jpg","_content":"","source":"404.md","raw":"---\nlayout: 404\ndescription: \"你来到了没有知识的荒原 :(\"\nheader-img: \"img/404-bg.jpg\"\n---\n","date":"2017-10-08T21:29:36.000Z","updated":"2017-10-08T21:29:36.000Z","path":"404.html","title":"","comments":1,"_id":"cjcxdx40700001q1ysbetckv6","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Daily-Readings","header-img":"img/home-bg.jpg","date":"2018-01-27T13:19:32.000Z","description":null,"_content":"","source":"Daily-Readings/index.md","raw":"---\ntitle: Daily-Readings\nheader-img: img/home-bg.jpg\ndate: 2018-01-27 14:19:32\ndescription:\n---\n","updated":"2018-01-27T13:19:32.000Z","path":"Daily-Readings/index.html","comments":1,"layout":"page","_id":"cjcxdx42i00021q1ycn2bzjp0","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Readings","header-img":"img/home-bg.jpg","date":"2018-01-27T13:19:21.000Z","description":null,"_content":"## Hello, this is a curated list of readings. \n","source":"Readings/index.md","raw":"---\ntitle: Readings\nheader-img: img/home-bg.jpg\ndate: 2018-01-27 14:19:21\ndescription:\n---\n## Hello, this is a curated list of readings. \n","updated":"2018-01-27T13:24:13.000Z","path":"Readings/index.html","_id":"cjcxdx42l00041q1y4lq6vthv","comments":1,"layout":"page","content":"<h2><span id=\"hello-this-is-a-curated-list-of-readings\">Hello, this is a curated list of readings.</span></h2>\n","site":{"data":{}},"excerpt":"","more":"<h2>Hello, this is a curated list of readings.</h2>\n"},{"title":"about","date":"2017-09-10T11:18:55.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-09-10 13:18:55\n---\n","updated":"2017-10-08T21:34:22.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjcxdx42u00071q1ynwi66jzd","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"archive","title":"Archives","header-img":"img/header_img/archive-bg.png","comments":0,"date":"2017-03-20T19:49:56.000Z","description":"Hey, this is archives","_content":"","source":"archive/index.md","raw":"---\nlayout: \"archive\"\ntitle: \"Archives\"\nheader-img: \"img/header_img/archive-bg.png\"\ncomments: false\ndate: 2017-03-20 20:49:56\ndescription: \"Hey, this is archives\"\n---\n","updated":"2017-10-08T21:29:36.000Z","path":"archive/index.html","_id":"cjcxdx42w00091q1y9xvx4qh9","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"tags","title":"Tags","description":"Hey, this is Tags.","header-img":"img/header_img/tag-bg.png","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"Tags\"\ndescription: \"Hey, this is Tags.\"\nheader-img: \"img/header_img/tag-bg.png\"\n---\n","date":"2017-10-08T21:29:37.000Z","updated":"2017-10-08T21:29:36.000Z","path":"tags/index.html","comments":1,"_id":"cjcxdx438000i1q1ymgf46b2w","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"_content":"","source":"_posts/Workshop-para-crear-una-DAO-Decentralized-Autonomous-Organization.md","raw":"","slug":"Workshop-para-crear-una-DAO-Decentralized-Autonomous-Organization","published":1,"date":"2017-10-08T21:34:22.000Z","updated":"2017-10-08T21:34:22.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcxdx41c00011q1yazlkkpjk","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Analizando DNS para después descentralizarlo con ENS","date":"2017-10-06T22:47:24.000Z","_content":"\n\n## Intro\n\nEn el siguiente post, observaremos en detalle el servicio de registro de nombre de Ethereum (ENS) y haremos un pequeño tutorial de cómo utilizar Ethereum Name Service para registrar tu propio dominio y asociar variables al mismo.\n\n*Como siempre, comenzaremos explorando los fundamentos (en este caso, los protocolos actualmente utilizados en la web) para comprender el racional de arquitectura, posteiormente analizaremos el estandard ENS y finalmente realizaremos ejercicio sobre la red actual*.\n\n*Esto ayudará a entender los requisitos necesarios para futuras necesidades de ENS y funcionalidades requeridas por ENS, de modo que podamos reemplazar completamente el servicio*.\n\n*Para aquellos que sepan cómo funciona DNS y quieran ir al grano con ENS, pueden pasar directamente al punto [ENS](#ENS:Ethereum-Name-Service)*\n\n### Precedente: DNS (Domain Name System)\n\n[DNS (Domain Name System), RFC 1035](https://www.ietf.org/rfc/rfc1035.txt) es uno de los servicios pilares de la web bien conocido por todos, cuyo objetivo básico es el de proveer de un servicio de nombres para el recursos. Como se verá en puntos posteriores, su funcionamiento tiene una estructura jerárquica y distrubuida (no descentralizada), ya que su base de datos se encuentra repartida entre numerosos servidores (Domain Servers).\n\nFundamentalmente, su funcionamiento puede separarse en tres funcionalidades principales:\n\n- Arboles de dominio\n- Resolvers\n- Namespaces\n- Name Servers\n\nQue exploraremos en los puntos posteriores.\n\n### Namespaces\n\nEl estandar DNS define una estructura de arbol en el cual, cada rama representa un dominio separado. De esta manera. Cada uno de estos dominios tiene asociados una serie de recursos (invisibles para el usuario), de manera que según la funcionalidad que una query haga a esta dirección tendrá acceso a un [recurso](http://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml) diferente. La mayor parte de los lectores que haya configurado un servidor de nombres le serán familiares la mayor parte de estos [recursos](http://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml), que incluyen algunos como los siguientes:\n\n| TYPE  | Value | Meaning                                | Reference                                | Template | Registration Date |\n| ----- | ----- | -------------------------------------- | ---------------------------------------- | -------- | ----------------- |\n| A     | 1     | a host address                         | [[RFC1035](http://www.iana.org/go/rfc1035)] |          |                   |\n| NS    | 2     | an authoritative name server           | [[RFC1035](http://www.iana.org/go/rfc1035)] |          |                   |\n| MD    | 3     | a mail destination (OBSOLETE - use MX) | [[RFC1035](http://www.iana.org/go/rfc1035)] |          |                   |\n| MF    | 4     | a mail forwarder (OBSOLETE - use MX)   | [[RFC1035](http://www.iana.org/go/rfc1035)] |          |                   |\n| CNAME | 5     | the canonical name for an alias        | [[RFC1035](http://www.iana.org/go/rfc1035)] |          |                   |\n\n… Y así un gran listado de ellos\n\nUn ejemplo para poder acceder a los recursos asociados a un registro determinado es utilizando el comando ``$host`` (Unix):\n\n```sh\n  $host buendia.io\n\n  buendia.io has address 192.30.252.154\n```\n\nEn el que comprobamos la dirección IPv4 del host de la página ( registro tipo A). O utilizando la opción -a, observando el resto de registros del NameSpace.\n\n```sh\n  $host -a buendia.io\n  ;; ANSWER SECTION:\n  buendia.io.\t\t1642\tIN\tMX\t20 eforward5.registrar-servers.com.\n  buendia.io.\t\t1642\tIN\tMX\t10 eforward2.registrar-servers.com.\n  buendia.io.\t\t1642\tIN\tMX\t15 eforward4.registrar-servers.com.\n  buendia.io.\t\t1642\tIN\tMX\t10 eforward1.registrar-servers.com.\n  buendia.io.\t\t1642\tIN\tMX\t10 eforward3.registrar-servers.com.\n  buendia.io.\t\t753\tIN\tA\t192.30.252.153\n  buendia.io.\t\t753\tIN\tA\t192.30.252.154\n```\n\n\n\nEn el cual podemos comprobar, por ejemplo, que el dominio [buendia.io](http://buendia.io) tiene:\n\n- Registros tipo \"A\" (IPv4) del host a IP's: ```sh 192.30.252.153```, ```sh 192.30.252.154```\n\n- Registros tipo \"MX\" (Mail Exchange) al servidor: eforward5.registrar-servers.com\n\n### Name Servers\n\nAplicación en un servidor que contiene la información sobre el arbol, la cual responde a las queries para aquellos dominios de los que tiene autoridad (estructura jerárquica) y reenvía las peticiones a otros dominios de los que no tiene autoridad a otro resolver, lo cual recursivamente permite acceder a todos los dominios en un árbol.\n\nPodemos observar donde se encuentra el Nameserver al que estamos accediendo a través del resolver haciendo un ``$nslookup``:\n\n```shell\n$nslookup buendia.io\n\nServer:\t\t192.168.0.1\nAddress:\t192.168.0.1#53\n\nNon-authoritative answer:\nName:\tbuendia.io\nAddress: 192.30.252.154\nName:\tbuendia.io\nAddress: 192.30.252.153\n```\n\nLo cual nos devuelve la dirección del NameServer de autoridad en mi red local (Mi router), y la respuesta obtenido.\n\n### Resolvers\n\n```\n                 Local Host                        |  Foreign\n                                                   |\n    +---------+               +----------+         |  +--------+\n    |         | user queries  |          |queries  |  |        |\n    |  User   |-------------->|          |---------|->|Foreign |\n    | Program |               | Resolver |         |  |  Name  |\n    |         |<--------------|          |<--------|--| Server |\n    |         | user responses|          |responses|  |        |\n    +---------+               +----------+         |  +--------+\n                                |     A            |\n                cache additions |     | references |\n                                V     |            |\n                              +----------+         |\n                              |  cache   |         |\n                              +----------+         |\n```\n\n¿A quíen debo preguntar como usuario para saber donde acceder al recurso? Los resolvers se encargan de esta tarea. Un resolver tiene acceso al menos a **un servidor DNS**.\n\nEn este caso, en UNIX, puedes hacer:\n\n```shell\n$ cat /etc/resolv.conf\n```\n\nLo cual devolverá algo parecido a:\n\n```nameserver 192.168.0.1```\n\n### Jerarquía\n\nA partir de esta información, encontramos una estructura de comunicaciones entre NameServers y resolvers jerárquica, en la cual, cada una de las ramas *\"padre\"*, conoce a sus hijos.\n\n![hierarchy](http://player.slideplayer.com/16/5263622/data/images/img4.jpg)\n\n\n\nY bien, ¿Quiénes son esos Root Name servers que tienen autoridad sobre todo servidor? Podemos encontrarlos en [IANA (Internet Assigned Numbers Authority)](https://www.iana.org/domains/root/servers):\n\n| HOSTNAME           | IP ADDRESSES                      | MANAGER                                 |\n| ------------------ | --------------------------------- | --------------------------------------- |\n| a.root-servers.net | 198.41.0.4, 2001:503:ba3e::2:30   | VeriSign, Inc.                          |\n| b.root-servers.net | 192.228.79.201, 2001:500:200::b   | University of Southern California (ISI) |\n| c.root-servers.net | 192.33.4.12, 2001:500:2::c        | Cogent Communications                   |\n| d.root-servers.net | 199.7.91.13, 2001:500:2d::d       | University of Maryland                  |\n| e.root-servers.net | 192.203.230.10, 2001:500:a8::e    | NASA (Ames Research Center)             |\n| f.root-servers.net | 192.5.5.241, 2001:500:2f::f       | Internet Systems Consortium, Inc.       |\n| g.root-servers.net | 192.112.36.4, 2001:500:12::d0d    | US Department of Defense (NIC)          |\n| h.root-servers.net | 198.97.190.53, 2001:500:1::53     | US Army (Research Lab)                  |\n| i.root-servers.net | 192.36.148.17, 2001:7fe::53       | Netnod                                  |\n| j.root-servers.net | 192.58.128.30, 2001:503:c27::2:30 | VeriSign, Inc.                          |\n| k.root-servers.net | 193.0.14.129, 2001:7fd::1         | RIPE NCC                                |\n| l.root-servers.net | 199.7.83.42, 2001:500:9f::42      | ICANN                                   |\n| m.root-servers.net | 202.12.27.33, 2001:dc3::35        | WIDE Project                            |\n\n\n\n![Comunicaciones](http://player.slideplayer.com/16/5263622/data/images/img9.jpg)\n\n[Ejemplo de propagación de nombres](https://dnschecker.org/#A/buendia.io)\n\nPero bien, ya hemos hablado suficiente de DNS, y todos lo conocemos bien, **¿Por qué no empezamos a hablar de ENS?**\n","source":"_posts/Analizando-DNS-para-descentralizarlo-con-DNS.md","raw":"---\ntitle: Analizando DNS para después descentralizarlo con ENS\ndate: 2017-10-07 00:47:24\ntags: ENS,Ethereum,Tutorial\n---\n\n\n## Intro\n\nEn el siguiente post, observaremos en detalle el servicio de registro de nombre de Ethereum (ENS) y haremos un pequeño tutorial de cómo utilizar Ethereum Name Service para registrar tu propio dominio y asociar variables al mismo.\n\n*Como siempre, comenzaremos explorando los fundamentos (en este caso, los protocolos actualmente utilizados en la web) para comprender el racional de arquitectura, posteiormente analizaremos el estandard ENS y finalmente realizaremos ejercicio sobre la red actual*.\n\n*Esto ayudará a entender los requisitos necesarios para futuras necesidades de ENS y funcionalidades requeridas por ENS, de modo que podamos reemplazar completamente el servicio*.\n\n*Para aquellos que sepan cómo funciona DNS y quieran ir al grano con ENS, pueden pasar directamente al punto [ENS](#ENS:Ethereum-Name-Service)*\n\n### Precedente: DNS (Domain Name System)\n\n[DNS (Domain Name System), RFC 1035](https://www.ietf.org/rfc/rfc1035.txt) es uno de los servicios pilares de la web bien conocido por todos, cuyo objetivo básico es el de proveer de un servicio de nombres para el recursos. Como se verá en puntos posteriores, su funcionamiento tiene una estructura jerárquica y distrubuida (no descentralizada), ya que su base de datos se encuentra repartida entre numerosos servidores (Domain Servers).\n\nFundamentalmente, su funcionamiento puede separarse en tres funcionalidades principales:\n\n- Arboles de dominio\n- Resolvers\n- Namespaces\n- Name Servers\n\nQue exploraremos en los puntos posteriores.\n\n### Namespaces\n\nEl estandar DNS define una estructura de arbol en el cual, cada rama representa un dominio separado. De esta manera. Cada uno de estos dominios tiene asociados una serie de recursos (invisibles para el usuario), de manera que según la funcionalidad que una query haga a esta dirección tendrá acceso a un [recurso](http://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml) diferente. La mayor parte de los lectores que haya configurado un servidor de nombres le serán familiares la mayor parte de estos [recursos](http://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml), que incluyen algunos como los siguientes:\n\n| TYPE  | Value | Meaning                                | Reference                                | Template | Registration Date |\n| ----- | ----- | -------------------------------------- | ---------------------------------------- | -------- | ----------------- |\n| A     | 1     | a host address                         | [[RFC1035](http://www.iana.org/go/rfc1035)] |          |                   |\n| NS    | 2     | an authoritative name server           | [[RFC1035](http://www.iana.org/go/rfc1035)] |          |                   |\n| MD    | 3     | a mail destination (OBSOLETE - use MX) | [[RFC1035](http://www.iana.org/go/rfc1035)] |          |                   |\n| MF    | 4     | a mail forwarder (OBSOLETE - use MX)   | [[RFC1035](http://www.iana.org/go/rfc1035)] |          |                   |\n| CNAME | 5     | the canonical name for an alias        | [[RFC1035](http://www.iana.org/go/rfc1035)] |          |                   |\n\n… Y así un gran listado de ellos\n\nUn ejemplo para poder acceder a los recursos asociados a un registro determinado es utilizando el comando ``$host`` (Unix):\n\n```sh\n  $host buendia.io\n\n  buendia.io has address 192.30.252.154\n```\n\nEn el que comprobamos la dirección IPv4 del host de la página ( registro tipo A). O utilizando la opción -a, observando el resto de registros del NameSpace.\n\n```sh\n  $host -a buendia.io\n  ;; ANSWER SECTION:\n  buendia.io.\t\t1642\tIN\tMX\t20 eforward5.registrar-servers.com.\n  buendia.io.\t\t1642\tIN\tMX\t10 eforward2.registrar-servers.com.\n  buendia.io.\t\t1642\tIN\tMX\t15 eforward4.registrar-servers.com.\n  buendia.io.\t\t1642\tIN\tMX\t10 eforward1.registrar-servers.com.\n  buendia.io.\t\t1642\tIN\tMX\t10 eforward3.registrar-servers.com.\n  buendia.io.\t\t753\tIN\tA\t192.30.252.153\n  buendia.io.\t\t753\tIN\tA\t192.30.252.154\n```\n\n\n\nEn el cual podemos comprobar, por ejemplo, que el dominio [buendia.io](http://buendia.io) tiene:\n\n- Registros tipo \"A\" (IPv4) del host a IP's: ```sh 192.30.252.153```, ```sh 192.30.252.154```\n\n- Registros tipo \"MX\" (Mail Exchange) al servidor: eforward5.registrar-servers.com\n\n### Name Servers\n\nAplicación en un servidor que contiene la información sobre el arbol, la cual responde a las queries para aquellos dominios de los que tiene autoridad (estructura jerárquica) y reenvía las peticiones a otros dominios de los que no tiene autoridad a otro resolver, lo cual recursivamente permite acceder a todos los dominios en un árbol.\n\nPodemos observar donde se encuentra el Nameserver al que estamos accediendo a través del resolver haciendo un ``$nslookup``:\n\n```shell\n$nslookup buendia.io\n\nServer:\t\t192.168.0.1\nAddress:\t192.168.0.1#53\n\nNon-authoritative answer:\nName:\tbuendia.io\nAddress: 192.30.252.154\nName:\tbuendia.io\nAddress: 192.30.252.153\n```\n\nLo cual nos devuelve la dirección del NameServer de autoridad en mi red local (Mi router), y la respuesta obtenido.\n\n### Resolvers\n\n```\n                 Local Host                        |  Foreign\n                                                   |\n    +---------+               +----------+         |  +--------+\n    |         | user queries  |          |queries  |  |        |\n    |  User   |-------------->|          |---------|->|Foreign |\n    | Program |               | Resolver |         |  |  Name  |\n    |         |<--------------|          |<--------|--| Server |\n    |         | user responses|          |responses|  |        |\n    +---------+               +----------+         |  +--------+\n                                |     A            |\n                cache additions |     | references |\n                                V     |            |\n                              +----------+         |\n                              |  cache   |         |\n                              +----------+         |\n```\n\n¿A quíen debo preguntar como usuario para saber donde acceder al recurso? Los resolvers se encargan de esta tarea. Un resolver tiene acceso al menos a **un servidor DNS**.\n\nEn este caso, en UNIX, puedes hacer:\n\n```shell\n$ cat /etc/resolv.conf\n```\n\nLo cual devolverá algo parecido a:\n\n```nameserver 192.168.0.1```\n\n### Jerarquía\n\nA partir de esta información, encontramos una estructura de comunicaciones entre NameServers y resolvers jerárquica, en la cual, cada una de las ramas *\"padre\"*, conoce a sus hijos.\n\n![hierarchy](http://player.slideplayer.com/16/5263622/data/images/img4.jpg)\n\n\n\nY bien, ¿Quiénes son esos Root Name servers que tienen autoridad sobre todo servidor? Podemos encontrarlos en [IANA (Internet Assigned Numbers Authority)](https://www.iana.org/domains/root/servers):\n\n| HOSTNAME           | IP ADDRESSES                      | MANAGER                                 |\n| ------------------ | --------------------------------- | --------------------------------------- |\n| a.root-servers.net | 198.41.0.4, 2001:503:ba3e::2:30   | VeriSign, Inc.                          |\n| b.root-servers.net | 192.228.79.201, 2001:500:200::b   | University of Southern California (ISI) |\n| c.root-servers.net | 192.33.4.12, 2001:500:2::c        | Cogent Communications                   |\n| d.root-servers.net | 199.7.91.13, 2001:500:2d::d       | University of Maryland                  |\n| e.root-servers.net | 192.203.230.10, 2001:500:a8::e    | NASA (Ames Research Center)             |\n| f.root-servers.net | 192.5.5.241, 2001:500:2f::f       | Internet Systems Consortium, Inc.       |\n| g.root-servers.net | 192.112.36.4, 2001:500:12::d0d    | US Department of Defense (NIC)          |\n| h.root-servers.net | 198.97.190.53, 2001:500:1::53     | US Army (Research Lab)                  |\n| i.root-servers.net | 192.36.148.17, 2001:7fe::53       | Netnod                                  |\n| j.root-servers.net | 192.58.128.30, 2001:503:c27::2:30 | VeriSign, Inc.                          |\n| k.root-servers.net | 193.0.14.129, 2001:7fd::1         | RIPE NCC                                |\n| l.root-servers.net | 199.7.83.42, 2001:500:9f::42      | ICANN                                   |\n| m.root-servers.net | 202.12.27.33, 2001:dc3::35        | WIDE Project                            |\n\n\n\n![Comunicaciones](http://player.slideplayer.com/16/5263622/data/images/img9.jpg)\n\n[Ejemplo de propagación de nombres](https://dnschecker.org/#A/buendia.io)\n\nPero bien, ya hemos hablado suficiente de DNS, y todos lo conocemos bien, **¿Por qué no empezamos a hablar de ENS?**\n","slug":"Analizando-DNS-para-descentralizarlo-con-DNS","published":1,"updated":"2017-10-12T08:59:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcxdx42i00031q1yijz40kqo","content":"<h2><span id=\"intro\">Intro</span></h2>\n<p>En el siguiente post, observaremos en detalle el servicio de registro de nombre de Ethereum (ENS) y haremos un pequeño tutorial de cómo utilizar Ethereum Name Service para registrar tu propio dominio y asociar variables al mismo.</p>\n<p><em>Como siempre, comenzaremos explorando los fundamentos (en este caso, los protocolos actualmente utilizados en la web) para comprender el racional de arquitectura, posteiormente analizaremos el estandard ENS y finalmente realizaremos ejercicio sobre la red actual</em>.</p>\n<p><em>Esto ayudará a entender los requisitos necesarios para futuras necesidades de ENS y funcionalidades requeridas por ENS, de modo que podamos reemplazar completamente el servicio</em>.</p>\n<p><em>Para aquellos que sepan cómo funciona DNS y quieran ir al grano con ENS, pueden pasar directamente al punto <a href=\"#ENS:Ethereum-Name-Service\">ENS</a></em></p>\n<h3><span id=\"precedente-dns-domain-name-system\">Precedente: DNS (Domain Name System)</span></h3>\n<p><a href=\"https://www.ietf.org/rfc/rfc1035.txt\" target=\"_blank\" rel=\"external\">DNS (Domain Name System), RFC 1035</a> es uno de los servicios pilares de la web bien conocido por todos, cuyo objetivo básico es el de proveer de un servicio de nombres para el recursos. Como se verá en puntos posteriores, su funcionamiento tiene una estructura jerárquica y distrubuida (no descentralizada), ya que su base de datos se encuentra repartida entre numerosos servidores (Domain Servers).</p>\n<p>Fundamentalmente, su funcionamiento puede separarse en tres funcionalidades principales:</p>\n<ul>\n<li>Arboles de dominio</li>\n<li>Resolvers</li>\n<li>Namespaces</li>\n<li>Name Servers</li>\n</ul>\n<p>Que exploraremos en los puntos posteriores.</p>\n<h3><span id=\"namespaces\">Namespaces</span></h3>\n<p>El estandar DNS define una estructura de arbol en el cual, cada rama representa un dominio separado. De esta manera. Cada uno de estos dominios tiene asociados una serie de recursos (invisibles para el usuario), de manera que según la funcionalidad que una query haga a esta dirección tendrá acceso a un <a href=\"http://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml\" target=\"_blank\" rel=\"external\">recurso</a> diferente. La mayor parte de los lectores que haya configurado un servidor de nombres le serán familiares la mayor parte de estos <a href=\"http://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml\" target=\"_blank\" rel=\"external\">recursos</a>, que incluyen algunos como los siguientes:</p>\n<table>\n<thead>\n<tr>\n<th>TYPE</th>\n<th>Value</th>\n<th>Meaning</th>\n<th>Reference</th>\n<th>Template</th>\n<th>Registration Date</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>A</td>\n<td>1</td>\n<td>a host address</td>\n<td>[<a href=\"http://www.iana.org/go/rfc1035\" target=\"_blank\" rel=\"external\">RFC1035</a>]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>NS</td>\n<td>2</td>\n<td>an authoritative name server</td>\n<td>[<a href=\"http://www.iana.org/go/rfc1035\" target=\"_blank\" rel=\"external\">RFC1035</a>]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>MD</td>\n<td>3</td>\n<td>a mail destination (OBSOLETE - use MX)</td>\n<td>[<a href=\"http://www.iana.org/go/rfc1035\" target=\"_blank\" rel=\"external\">RFC1035</a>]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>MF</td>\n<td>4</td>\n<td>a mail forwarder (OBSOLETE - use MX)</td>\n<td>[<a href=\"http://www.iana.org/go/rfc1035\" target=\"_blank\" rel=\"external\">RFC1035</a>]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>CNAME</td>\n<td>5</td>\n<td>the canonical name for an alias</td>\n<td>[<a href=\"http://www.iana.org/go/rfc1035\" target=\"_blank\" rel=\"external\">RFC1035</a>]</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>… Y así un gran listado de ellos</p>\n<p>Un ejemplo para poder acceder a los recursos asociados a un registro determinado es utilizando el comando <code>$host</code> (Unix):</p>\n<p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$host</span> buendia.io</div><div class=\"line\"></div><div class=\"line\">buendia.io has address 192.30.252.154</div></pre></td></tr></table></figure></p>\n<p>En el que comprobamos la dirección IPv4 del host de la página ( registro tipo A). O utilizando la opción -a, observando el resto de registros del NameSpace.</p>\n<p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$host</span> -a buendia.io</div><div class=\"line\">;; ANSWER SECTION:</div><div class=\"line\">buendia.io.\t\t1642\tIN\tMX\t20 eforward5.registrar-servers.com.</div><div class=\"line\">buendia.io.\t\t1642\tIN\tMX\t10 eforward2.registrar-servers.com.</div><div class=\"line\">buendia.io.\t\t1642\tIN\tMX\t15 eforward4.registrar-servers.com.</div><div class=\"line\">buendia.io.\t\t1642\tIN\tMX\t10 eforward1.registrar-servers.com.</div><div class=\"line\">buendia.io.\t\t1642\tIN\tMX\t10 eforward3.registrar-servers.com.</div><div class=\"line\">buendia.io.\t\t753\tIN\tA\t192.30.252.153</div><div class=\"line\">buendia.io.\t\t753\tIN\tA\t192.30.252.154</div></pre></td></tr></table></figure></p>\n<p>En el cual podemos comprobar, por ejemplo, que el dominio <a href=\"http://buendia.io\" target=\"_blank\" rel=\"external\">buendia.io</a> tiene:</p>\n<ul>\n<li>Registros tipo &quot;A&quot; (IPv4) del host a IP's: <figure class=\"highlight sh\"><figcaption><span>192.30.252.153```, ```sh 192.30.252.154```</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">- Registros tipo <span class=\"string\">\"MX\"</span> (Mail Exchange) al servidor: eforward5.registrar-servers.com</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">### Name Servers</span></div><div class=\"line\"></div><div class=\"line\">Aplicación en un servidor que contiene la información sobre el arbol, la cual responde a las queries para aquellos dominios de los que tiene autoridad (estructura jerárquica) y reenvía las peticiones a otros dominios de los que no tiene autoridad a otro resolver, lo cual recursivamente permite acceder a todos los dominios en un árbol.</div><div class=\"line\"></div><div class=\"line\">Podemos observar donde se encuentra el Nameserver al que estamos accediendo a través del resolver haciendo un ``<span class=\"variable\">$nslookup</span>``:</div><div class=\"line\"></div><div class=\"line\">```shell</div><div class=\"line\"><span class=\"variable\">$nslookup</span> buendia.io</div><div class=\"line\"></div><div class=\"line\">Server:\t\t192.168.0.1</div><div class=\"line\">Address:\t192.168.0.1<span class=\"comment\">#53</span></div><div class=\"line\"></div><div class=\"line\">Non-authoritative answer:</div><div class=\"line\">Name:\tbuendia.io</div><div class=\"line\">Address: 192.30.252.154</div><div class=\"line\">Name:\tbuendia.io</div><div class=\"line\">Address: 192.30.252.153</div></pre></td></tr></table></figure></li>\n</ul>\n<p>Lo cual nos devuelve la dirección del NameServer de autoridad en mi red local (Mi router), y la respuesta obtenido.</p>\n<h3><span id=\"resolvers\">Resolvers</span></h3>\n<p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">             Local Host                        |  Foreign</div><div class=\"line\">                                               |</div><div class=\"line\">+---------+               +----------+         |  +--------+</div><div class=\"line\">|         | user queries  |          |queries  |  |        |</div><div class=\"line\">|  User   |--------------&gt;|          |---------|-&gt;|Foreign |</div><div class=\"line\">| Program |               | Resolver |         |  |  Name  |</div><div class=\"line\">|         |&lt;--------------|          |&lt;--------|--| Server |</div><div class=\"line\">|         | user responses|          |responses|  |        |</div><div class=\"line\">+---------+               +----------+         |  +--------+</div><div class=\"line\">                            |     A            |</div><div class=\"line\">            cache additions |     | references |</div><div class=\"line\">                            V     |            |</div><div class=\"line\">                          +----------+         |</div><div class=\"line\">                          |  cache   |         |</div><div class=\"line\">                          +----------+         |</div></pre></td></tr></table></figure></p>\n<p>¿A quíen debo preguntar como usuario para saber donde acceder al recurso? Los resolvers se encargan de esta tarea. Un resolver tiene acceso al menos a <strong>un servidor DNS</strong>.</p>\n<p>En este caso, en UNIX, puedes hacer:</p>\n<p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> cat /etc/resolv.conf</span></div></pre></td></tr></table></figure></p>\n<p>Lo cual devolverá algo parecido a:</p>\n<p><code>nameserver 192.168.0.1</code></p>\n<h3><span id=\"jerarquía\">Jerarquía</span></h3>\n<p>A partir de esta información, encontramos una estructura de comunicaciones entre NameServers y resolvers jerárquica, en la cual, cada una de las ramas <em>&quot;padre&quot;</em>, conoce a sus hijos.</p>\n<p><img src=\"http://player.slideplayer.com/16/5263622/data/images/img4.jpg\" alt=\"hierarchy\"></p>\n<p>Y bien, ¿Quiénes son esos Root Name servers que tienen autoridad sobre todo servidor? Podemos encontrarlos en <a href=\"https://www.iana.org/domains/root/servers\" target=\"_blank\" rel=\"external\">IANA (Internet Assigned Numbers Authority)</a>:</p>\n<table>\n<thead>\n<tr>\n<th>HOSTNAME</th>\n<th>IP ADDRESSES</th>\n<th>MANAGER</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>a.root-servers.net</td>\n<td>198.41.0.4, 2001:503:ba3e::2:30</td>\n<td>VeriSign, Inc.</td>\n</tr>\n<tr>\n<td>b.root-servers.net</td>\n<td>192.228.79.201, 2001:500:200::b</td>\n<td>University of Southern California (ISI)</td>\n</tr>\n<tr>\n<td>c.root-servers.net</td>\n<td>192.33.4.12, 2001:500:2::c</td>\n<td>Cogent Communications</td>\n</tr>\n<tr>\n<td>d.root-servers.net</td>\n<td>199.7.91.13, 2001:500:2d::d</td>\n<td>University of Maryland</td>\n</tr>\n<tr>\n<td>e.root-servers.net</td>\n<td>192.203.230.10, 2001:500:a8::e</td>\n<td>NASA (Ames Research Center)</td>\n</tr>\n<tr>\n<td>f.root-servers.net</td>\n<td>192.5.5.241, 2001:500:2f::f</td>\n<td>Internet Systems Consortium, Inc.</td>\n</tr>\n<tr>\n<td>g.root-servers.net</td>\n<td>192.112.36.4, 2001:500:12::d0d</td>\n<td>US Department of Defense (NIC)</td>\n</tr>\n<tr>\n<td>h.root-servers.net</td>\n<td>198.97.190.53, 2001:500:1::53</td>\n<td>US Army (Research Lab)</td>\n</tr>\n<tr>\n<td>i.root-servers.net</td>\n<td>192.36.148.17, 2001:7fe::53</td>\n<td>Netnod</td>\n</tr>\n<tr>\n<td>j.root-servers.net</td>\n<td>192.58.128.30, 2001:503:c27::2:30</td>\n<td>VeriSign, Inc.</td>\n</tr>\n<tr>\n<td>k.root-servers.net</td>\n<td>193.0.14.129, 2001:7fd::1</td>\n<td>RIPE NCC</td>\n</tr>\n<tr>\n<td>l.root-servers.net</td>\n<td>199.7.83.42, 2001:500:9f::42</td>\n<td>ICANN</td>\n</tr>\n<tr>\n<td>m.root-servers.net</td>\n<td>202.12.27.33, 2001:dc3::35</td>\n<td>WIDE Project</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"http://player.slideplayer.com/16/5263622/data/images/img9.jpg\" alt=\"Comunicaciones\"></p>\n<p><a href=\"https://dnschecker.org/#A/buendia.io\" target=\"_blank\" rel=\"external\">Ejemplo de propagación de nombres</a></p>\n<p>Pero bien, ya hemos hablado suficiente de DNS, y todos lo conocemos bien, <strong>¿Por qué no empezamos a hablar de ENS?</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h2>Intro</h2>\n<p>En el siguiente post, observaremos en detalle el servicio de registro de nombre de Ethereum (ENS) y haremos un pequeño tutorial de cómo utilizar Ethereum Name Service para registrar tu propio dominio y asociar variables al mismo.</p>\n<p><em>Como siempre, comenzaremos explorando los fundamentos (en este caso, los protocolos actualmente utilizados en la web) para comprender el racional de arquitectura, posteiormente analizaremos el estandard ENS y finalmente realizaremos ejercicio sobre la red actual</em>.</p>\n<p><em>Esto ayudará a entender los requisitos necesarios para futuras necesidades de ENS y funcionalidades requeridas por ENS, de modo que podamos reemplazar completamente el servicio</em>.</p>\n<p><em>Para aquellos que sepan cómo funciona DNS y quieran ir al grano con ENS, pueden pasar directamente al punto <a href=\"#ENS:Ethereum-Name-Service\">ENS</a></em></p>\n<h3>Precedente: DNS (Domain Name System)</h3>\n<p><a href=\"https://www.ietf.org/rfc/rfc1035.txt\" target=\"_blank\" rel=\"external\">DNS (Domain Name System), RFC 1035</a> es uno de los servicios pilares de la web bien conocido por todos, cuyo objetivo básico es el de proveer de un servicio de nombres para el recursos. Como se verá en puntos posteriores, su funcionamiento tiene una estructura jerárquica y distrubuida (no descentralizada), ya que su base de datos se encuentra repartida entre numerosos servidores (Domain Servers).</p>\n<p>Fundamentalmente, su funcionamiento puede separarse en tres funcionalidades principales:</p>\n<ul>\n<li>Arboles de dominio</li>\n<li>Resolvers</li>\n<li>Namespaces</li>\n<li>Name Servers</li>\n</ul>\n<p>Que exploraremos en los puntos posteriores.</p>\n<h3>Namespaces</h3>\n<p>El estandar DNS define una estructura de arbol en el cual, cada rama representa un dominio separado. De esta manera. Cada uno de estos dominios tiene asociados una serie de recursos (invisibles para el usuario), de manera que según la funcionalidad que una query haga a esta dirección tendrá acceso a un <a href=\"http://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml\" target=\"_blank\" rel=\"external\">recurso</a> diferente. La mayor parte de los lectores que haya configurado un servidor de nombres le serán familiares la mayor parte de estos <a href=\"http://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml\" target=\"_blank\" rel=\"external\">recursos</a>, que incluyen algunos como los siguientes:</p>\n<table>\n<thead>\n<tr>\n<th>TYPE</th>\n<th>Value</th>\n<th>Meaning</th>\n<th>Reference</th>\n<th>Template</th>\n<th>Registration Date</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>A</td>\n<td>1</td>\n<td>a host address</td>\n<td>[<a href=\"http://www.iana.org/go/rfc1035\" target=\"_blank\" rel=\"external\">RFC1035</a>]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>NS</td>\n<td>2</td>\n<td>an authoritative name server</td>\n<td>[<a href=\"http://www.iana.org/go/rfc1035\" target=\"_blank\" rel=\"external\">RFC1035</a>]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>MD</td>\n<td>3</td>\n<td>a mail destination (OBSOLETE - use MX)</td>\n<td>[<a href=\"http://www.iana.org/go/rfc1035\" target=\"_blank\" rel=\"external\">RFC1035</a>]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>MF</td>\n<td>4</td>\n<td>a mail forwarder (OBSOLETE - use MX)</td>\n<td>[<a href=\"http://www.iana.org/go/rfc1035\" target=\"_blank\" rel=\"external\">RFC1035</a>]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>CNAME</td>\n<td>5</td>\n<td>the canonical name for an alias</td>\n<td>[<a href=\"http://www.iana.org/go/rfc1035\" target=\"_blank\" rel=\"external\">RFC1035</a>]</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>… Y así un gran listado de ellos</p>\n<p>Un ejemplo para poder acceder a los recursos asociados a un registro determinado es utilizando el comando <code>$host</code> (Unix):</p>\n<p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$host</span> buendia.io</div><div class=\"line\"></div><div class=\"line\">buendia.io has address 192.30.252.154</div></pre></td></tr></table></figure></p>\n<p>En el que comprobamos la dirección IPv4 del host de la página ( registro tipo A). O utilizando la opción -a, observando el resto de registros del NameSpace.</p>\n<p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$host</span> -a buendia.io</div><div class=\"line\">;; ANSWER SECTION:</div><div class=\"line\">buendia.io.\t\t1642\tIN\tMX\t20 eforward5.registrar-servers.com.</div><div class=\"line\">buendia.io.\t\t1642\tIN\tMX\t10 eforward2.registrar-servers.com.</div><div class=\"line\">buendia.io.\t\t1642\tIN\tMX\t15 eforward4.registrar-servers.com.</div><div class=\"line\">buendia.io.\t\t1642\tIN\tMX\t10 eforward1.registrar-servers.com.</div><div class=\"line\">buendia.io.\t\t1642\tIN\tMX\t10 eforward3.registrar-servers.com.</div><div class=\"line\">buendia.io.\t\t753\tIN\tA\t192.30.252.153</div><div class=\"line\">buendia.io.\t\t753\tIN\tA\t192.30.252.154</div></pre></td></tr></table></figure></p>\n<p>En el cual podemos comprobar, por ejemplo, que el dominio <a href=\"http://buendia.io\" target=\"_blank\" rel=\"external\">buendia.io</a> tiene:</p>\n<ul>\n<li>Registros tipo &quot;A&quot; (IPv4) del host a IP's: <figure class=\"highlight sh\"><figcaption><span>192.30.252.153```, ```sh 192.30.252.154```</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">- Registros tipo <span class=\"string\">\"MX\"</span> (Mail Exchange) al servidor: eforward5.registrar-servers.com</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">### Name Servers</span></div><div class=\"line\"></div><div class=\"line\">Aplicación en un servidor que contiene la información sobre el arbol, la cual responde a las queries para aquellos dominios de los que tiene autoridad (estructura jerárquica) y reenvía las peticiones a otros dominios de los que no tiene autoridad a otro resolver, lo cual recursivamente permite acceder a todos los dominios en un árbol.</div><div class=\"line\"></div><div class=\"line\">Podemos observar donde se encuentra el Nameserver al que estamos accediendo a través del resolver haciendo un ``<span class=\"variable\">$nslookup</span>``:</div><div class=\"line\"></div><div class=\"line\">```shell</div><div class=\"line\"><span class=\"variable\">$nslookup</span> buendia.io</div><div class=\"line\"></div><div class=\"line\">Server:\t\t192.168.0.1</div><div class=\"line\">Address:\t192.168.0.1<span class=\"comment\">#53</span></div><div class=\"line\"></div><div class=\"line\">Non-authoritative answer:</div><div class=\"line\">Name:\tbuendia.io</div><div class=\"line\">Address: 192.30.252.154</div><div class=\"line\">Name:\tbuendia.io</div><div class=\"line\">Address: 192.30.252.153</div></pre></td></tr></table></figure></li>\n</ul>\n<p>Lo cual nos devuelve la dirección del NameServer de autoridad en mi red local (Mi router), y la respuesta obtenido.</p>\n<h3>Resolvers</h3>\n<p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">             Local Host                        |  Foreign</div><div class=\"line\">                                               |</div><div class=\"line\">+---------+               +----------+         |  +--------+</div><div class=\"line\">|         | user queries  |          |queries  |  |        |</div><div class=\"line\">|  User   |--------------&gt;|          |---------|-&gt;|Foreign |</div><div class=\"line\">| Program |               | Resolver |         |  |  Name  |</div><div class=\"line\">|         |&lt;--------------|          |&lt;--------|--| Server |</div><div class=\"line\">|         | user responses|          |responses|  |        |</div><div class=\"line\">+---------+               +----------+         |  +--------+</div><div class=\"line\">                            |     A            |</div><div class=\"line\">            cache additions |     | references |</div><div class=\"line\">                            V     |            |</div><div class=\"line\">                          +----------+         |</div><div class=\"line\">                          |  cache   |         |</div><div class=\"line\">                          +----------+         |</div></pre></td></tr></table></figure></p>\n<p>¿A quíen debo preguntar como usuario para saber donde acceder al recurso? Los resolvers se encargan de esta tarea. Un resolver tiene acceso al menos a <strong>un servidor DNS</strong>.</p>\n<p>En este caso, en UNIX, puedes hacer:</p>\n<p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> cat /etc/resolv.conf</span></div></pre></td></tr></table></figure></p>\n<p>Lo cual devolverá algo parecido a:</p>\n<p><code>nameserver 192.168.0.1</code></p>\n<h3>Jerarquía</h3>\n<p>A partir de esta información, encontramos una estructura de comunicaciones entre NameServers y resolvers jerárquica, en la cual, cada una de las ramas <em>&quot;padre&quot;</em>, conoce a sus hijos.</p>\n<p><img src=\"http://player.slideplayer.com/16/5263622/data/images/img4.jpg\" alt=\"hierarchy\"></p>\n<p>Y bien, ¿Quiénes son esos Root Name servers que tienen autoridad sobre todo servidor? Podemos encontrarlos en <a href=\"https://www.iana.org/domains/root/servers\" target=\"_blank\" rel=\"external\">IANA (Internet Assigned Numbers Authority)</a>:</p>\n<table>\n<thead>\n<tr>\n<th>HOSTNAME</th>\n<th>IP ADDRESSES</th>\n<th>MANAGER</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>a.root-servers.net</td>\n<td>198.41.0.4, 2001:503:ba3e::2:30</td>\n<td>VeriSign, Inc.</td>\n</tr>\n<tr>\n<td>b.root-servers.net</td>\n<td>192.228.79.201, 2001:500:200::b</td>\n<td>University of Southern California (ISI)</td>\n</tr>\n<tr>\n<td>c.root-servers.net</td>\n<td>192.33.4.12, 2001:500:2::c</td>\n<td>Cogent Communications</td>\n</tr>\n<tr>\n<td>d.root-servers.net</td>\n<td>199.7.91.13, 2001:500:2d::d</td>\n<td>University of Maryland</td>\n</tr>\n<tr>\n<td>e.root-servers.net</td>\n<td>192.203.230.10, 2001:500:a8::e</td>\n<td>NASA (Ames Research Center)</td>\n</tr>\n<tr>\n<td>f.root-servers.net</td>\n<td>192.5.5.241, 2001:500:2f::f</td>\n<td>Internet Systems Consortium, Inc.</td>\n</tr>\n<tr>\n<td>g.root-servers.net</td>\n<td>192.112.36.4, 2001:500:12::d0d</td>\n<td>US Department of Defense (NIC)</td>\n</tr>\n<tr>\n<td>h.root-servers.net</td>\n<td>198.97.190.53, 2001:500:1::53</td>\n<td>US Army (Research Lab)</td>\n</tr>\n<tr>\n<td>i.root-servers.net</td>\n<td>192.36.148.17, 2001:7fe::53</td>\n<td>Netnod</td>\n</tr>\n<tr>\n<td>j.root-servers.net</td>\n<td>192.58.128.30, 2001:503:c27::2:30</td>\n<td>VeriSign, Inc.</td>\n</tr>\n<tr>\n<td>k.root-servers.net</td>\n<td>193.0.14.129, 2001:7fd::1</td>\n<td>RIPE NCC</td>\n</tr>\n<tr>\n<td>l.root-servers.net</td>\n<td>199.7.83.42, 2001:500:9f::42</td>\n<td>ICANN</td>\n</tr>\n<tr>\n<td>m.root-servers.net</td>\n<td>202.12.27.33, 2001:dc3::35</td>\n<td>WIDE Project</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"http://player.slideplayer.com/16/5263622/data/images/img9.jpg\" alt=\"Comunicaciones\"></p>\n<p><a href=\"https://dnschecker.org/#A/buendia.io\" target=\"_blank\" rel=\"external\">Ejemplo de propagación de nombres</a></p>\n<p>Pero bien, ya hemos hablado suficiente de DNS, y todos lo conocemos bien, <strong>¿Por qué no empezamos a hablar de ENS?</strong></p>\n"},{"title":"Blockchain y el Problema de la Identidad","date":"2016-05-09T19:25:16.000Z","_content":"\nUno de los grandes problemas aún no resueltos desde la creación de Internet está asociado a la creación de una identidad digital única en la red. La cuestión envuelve infinidad de variables técnicas, regulatorias y sociales. Sin embargo, alcanzar una solución óptima resultaría de gran importancia especialmente para el sector financiero, en el cual se eliminarían los enormes costes asociados los procesos tradicionales de Know Your Customer (KYC) exigidos en cumplimiento de la normativa de Prevención de Blanqueo de Capitales.\nA la hora de diseñar una solución, cabe plantearse las siguientes preguntas:\n¿Quién verifica que una persona es quien dice ser quién es?\n¿Quién almacena la información asociada a esta persona?\n¿Cómo hacer que dicha información sea verificable y válida para que una entidad financiera permita a un usuario realizar operaciones cumpliendo las políticas relativas a Prevención de Blanqueo de Capitales (AML, por sus siglas en inglés) de forma ágil?\n\nEl pasado mes de Abril, parte del equipo de Grant Thornton, en colaboración con otros compañeros, presentamos una [propuesta a este problema](https://github.com/oraclize/dapp-proof-of-identity.git) utilizando blockchain en uno de los Hackathons asociados a esta tecnología más importantes a nivel internacional, que daría respuesta a muchas de las preguntas mencionadas. La solución planteada tuvo un gran impacto en la comunidad, siendo incluso mencionado por Vitalik Butterin (creador de Ethereum) durante el evento Consensus2016 que se está celebrando esta semana.\nblockathon_1\nEl equipo que desarrolló la prueba de concepto “Hidentity”.\n\n## La solución planteada\nLa mayoría de las soluciones basadas en blockchain actualmente disponibles (Bitcoin, Ethereum o Eris, entre otras), funcionan de manera pseudoanónima. Esto quiere decir que cualquier participante de la red tendrá un identificador asociado (su clave pública), que sin embargo no estará asociado a ninguna identidad física.\nEste pseudoanonimato ofrece muchas ventajas en multitud de casos de uso (por ejemplo, para casos de IoT). Sin embargo resulta un inconveniente para muchos otros, en los cuales es necesaria la asociación con la identidad física de la persona. Este es por ejemplo el caso de aquellas operativas relativas al sector financiero.\nCon esta Prueba de Concepto se abordó esta problemática, alcanzando una solución que permitiría actuar sobre la cadena de bloques con una identidad verificada.\nA continuación se muestra la arquitectura de la solución desarrollada, cuyos procesos  serán posteriormente explicados.\n\n![Diagrama Identidad Digital](/images/id_architecture.png)\n\n### Validación de la identidad\nPara la realización de este proceso, en lugar de reinventar la rueda, se utilizaron los estándares ya utilizados en la actualidad: el certificado o firma digital asociado a los documentos nacionales de identificación (DNI) suministrados por las autoridades públicas de cada jurisdicción.\nEn este caso, y dada la iniciativa de Estonia a crear un estándar de identificación global, se realizó la lectura de un DNI de esta procedencia.\ne-residency\n### Verificación de la identidad suministrada\nLa lectura del DNI proporcionará una firma en formato RSA. Esta firma será procesada a través de un Smart Contract (“on-chain”, es decir, dentro de la cadena de bloques en cuestión), asociando automáticamente una dirección de dicha blockchain a la identidad de la persona. De esta manera, se verificará de manera irrefutable (e inmutable) la pertenencia de la dirección firmada a esta identidad.\nUna vez se ha firmado la dirección pública, el usuario podrá utilizarla con asociación directa a su identidad, por lo que este proceso solo deberá realizarse una vez.\n\n### Almacenamiento de variables asociadas a dicha identidad\nHecho esto, la persona dispondrá de una identidad digital almacenada en la blockchain o cadena de bloques, pudiendo asociar diferentes datos a ella, y de esta manera haciéndolos públicos e íntegros desde cualquier punto en la blockchain, de forma que cualquier entidad o persona (según el uso que se dé a esta solución) pueda acceder a ellos. Esto será fácilmente realizable a través del uso de Smart Contracts.\nDe esta manera, haciendo uso de la firma digital y la blockchain, logramos desarrollar una verificación segura, pública e interoperable de asociar la identidad de una persona a una clave pública de la blockchain, facilitando la trazabilidad de transacciones y permitiendo agilizar el cumplimiento de políticas de AML/KYC. De hecho, este tipo de soluciones habilitarían una consolidación de este tipo de procesos con los exigidos por la normativa FATCA (Foreign Account Tax Compliance Act), cuestión que será abordada en posteriores artículos.\nEl código desarrollado se encuentra actualmente abierto al público en [Github](https://github.com/oraclize/dapp-proof-of-identity.git), subido por Thomas Bertani (en la foto, el primero a la derecha). Por otro lado, el contrato se encuentra subido a la red de pruebas “Morden” de Ethereum, pudiendo observar su almacenamiento en el siguiente enlace.\n","source":"_posts/Blockchain-y-el-Problema-de-la-Identidad.md","raw":"---\ntitle: Blockchain y el Problema de la Identidad\ndate: 2016-05-09 21:25:16\ntags: Identidad,Ethereum,Blockchain\n---\n\nUno de los grandes problemas aún no resueltos desde la creación de Internet está asociado a la creación de una identidad digital única en la red. La cuestión envuelve infinidad de variables técnicas, regulatorias y sociales. Sin embargo, alcanzar una solución óptima resultaría de gran importancia especialmente para el sector financiero, en el cual se eliminarían los enormes costes asociados los procesos tradicionales de Know Your Customer (KYC) exigidos en cumplimiento de la normativa de Prevención de Blanqueo de Capitales.\nA la hora de diseñar una solución, cabe plantearse las siguientes preguntas:\n¿Quién verifica que una persona es quien dice ser quién es?\n¿Quién almacena la información asociada a esta persona?\n¿Cómo hacer que dicha información sea verificable y válida para que una entidad financiera permita a un usuario realizar operaciones cumpliendo las políticas relativas a Prevención de Blanqueo de Capitales (AML, por sus siglas en inglés) de forma ágil?\n\nEl pasado mes de Abril, parte del equipo de Grant Thornton, en colaboración con otros compañeros, presentamos una [propuesta a este problema](https://github.com/oraclize/dapp-proof-of-identity.git) utilizando blockchain en uno de los Hackathons asociados a esta tecnología más importantes a nivel internacional, que daría respuesta a muchas de las preguntas mencionadas. La solución planteada tuvo un gran impacto en la comunidad, siendo incluso mencionado por Vitalik Butterin (creador de Ethereum) durante el evento Consensus2016 que se está celebrando esta semana.\nblockathon_1\nEl equipo que desarrolló la prueba de concepto “Hidentity”.\n\n## La solución planteada\nLa mayoría de las soluciones basadas en blockchain actualmente disponibles (Bitcoin, Ethereum o Eris, entre otras), funcionan de manera pseudoanónima. Esto quiere decir que cualquier participante de la red tendrá un identificador asociado (su clave pública), que sin embargo no estará asociado a ninguna identidad física.\nEste pseudoanonimato ofrece muchas ventajas en multitud de casos de uso (por ejemplo, para casos de IoT). Sin embargo resulta un inconveniente para muchos otros, en los cuales es necesaria la asociación con la identidad física de la persona. Este es por ejemplo el caso de aquellas operativas relativas al sector financiero.\nCon esta Prueba de Concepto se abordó esta problemática, alcanzando una solución que permitiría actuar sobre la cadena de bloques con una identidad verificada.\nA continuación se muestra la arquitectura de la solución desarrollada, cuyos procesos  serán posteriormente explicados.\n\n![Diagrama Identidad Digital](/images/id_architecture.png)\n\n### Validación de la identidad\nPara la realización de este proceso, en lugar de reinventar la rueda, se utilizaron los estándares ya utilizados en la actualidad: el certificado o firma digital asociado a los documentos nacionales de identificación (DNI) suministrados por las autoridades públicas de cada jurisdicción.\nEn este caso, y dada la iniciativa de Estonia a crear un estándar de identificación global, se realizó la lectura de un DNI de esta procedencia.\ne-residency\n### Verificación de la identidad suministrada\nLa lectura del DNI proporcionará una firma en formato RSA. Esta firma será procesada a través de un Smart Contract (“on-chain”, es decir, dentro de la cadena de bloques en cuestión), asociando automáticamente una dirección de dicha blockchain a la identidad de la persona. De esta manera, se verificará de manera irrefutable (e inmutable) la pertenencia de la dirección firmada a esta identidad.\nUna vez se ha firmado la dirección pública, el usuario podrá utilizarla con asociación directa a su identidad, por lo que este proceso solo deberá realizarse una vez.\n\n### Almacenamiento de variables asociadas a dicha identidad\nHecho esto, la persona dispondrá de una identidad digital almacenada en la blockchain o cadena de bloques, pudiendo asociar diferentes datos a ella, y de esta manera haciéndolos públicos e íntegros desde cualquier punto en la blockchain, de forma que cualquier entidad o persona (según el uso que se dé a esta solución) pueda acceder a ellos. Esto será fácilmente realizable a través del uso de Smart Contracts.\nDe esta manera, haciendo uso de la firma digital y la blockchain, logramos desarrollar una verificación segura, pública e interoperable de asociar la identidad de una persona a una clave pública de la blockchain, facilitando la trazabilidad de transacciones y permitiendo agilizar el cumplimiento de políticas de AML/KYC. De hecho, este tipo de soluciones habilitarían una consolidación de este tipo de procesos con los exigidos por la normativa FATCA (Foreign Account Tax Compliance Act), cuestión que será abordada en posteriores artículos.\nEl código desarrollado se encuentra actualmente abierto al público en [Github](https://github.com/oraclize/dapp-proof-of-identity.git), subido por Thomas Bertani (en la foto, el primero a la derecha). Por otro lado, el contrato se encuentra subido a la red de pruebas “Morden” de Ethereum, pudiendo observar su almacenamiento en el siguiente enlace.\n","slug":"Blockchain-y-el-Problema-de-la-Identidad","published":1,"updated":"2017-10-08T21:34:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcxdx42m00051q1yxk4uuntd","content":"<p>Uno de los grandes problemas aún no resueltos desde la creación de Internet está asociado a la creación de una identidad digital única en la red. La cuestión envuelve infinidad de variables técnicas, regulatorias y sociales. Sin embargo, alcanzar una solución óptima resultaría de gran importancia especialmente para el sector financiero, en el cual se eliminarían los enormes costes asociados los procesos tradicionales de Know Your Customer (KYC) exigidos en cumplimiento de la normativa de Prevención de Blanqueo de Capitales.\nA la hora de diseñar una solución, cabe plantearse las siguientes preguntas:\n¿Quién verifica que una persona es quien dice ser quién es?\n¿Quién almacena la información asociada a esta persona?\n¿Cómo hacer que dicha información sea verificable y válida para que una entidad financiera permita a un usuario realizar operaciones cumpliendo las políticas relativas a Prevención de Blanqueo de Capitales (AML, por sus siglas en inglés) de forma ágil?</p>\n<p>El pasado mes de Abril, parte del equipo de Grant Thornton, en colaboración con otros compañeros, presentamos una <a href=\"https://github.com/oraclize/dapp-proof-of-identity.git\" target=\"_blank\" rel=\"external\">propuesta a este problema</a> utilizando blockchain en uno de los Hackathons asociados a esta tecnología más importantes a nivel internacional, que daría respuesta a muchas de las preguntas mencionadas. La solución planteada tuvo un gran impacto en la comunidad, siendo incluso mencionado por Vitalik Butterin (creador de Ethereum) durante el evento Consensus2016 que se está celebrando esta semana.\nblockathon_1\nEl equipo que desarrolló la prueba de concepto “Hidentity”.</p>\n<h2><span id=\"la-solución-planteada\">La solución planteada</span></h2>\n<p>La mayoría de las soluciones basadas en blockchain actualmente disponibles (Bitcoin, Ethereum o Eris, entre otras), funcionan de manera pseudoanónima. Esto quiere decir que cualquier participante de la red tendrá un identificador asociado (su clave pública), que sin embargo no estará asociado a ninguna identidad física.\nEste pseudoanonimato ofrece muchas ventajas en multitud de casos de uso (por ejemplo, para casos de IoT). Sin embargo resulta un inconveniente para muchos otros, en los cuales es necesaria la asociación con la identidad física de la persona. Este es por ejemplo el caso de aquellas operativas relativas al sector financiero.\nCon esta Prueba de Concepto se abordó esta problemática, alcanzando una solución que permitiría actuar sobre la cadena de bloques con una identidad verificada.\nA continuación se muestra la arquitectura de la solución desarrollada, cuyos procesos  serán posteriormente explicados.</p>\n<p><img src=\"/images/id_architecture.png\" alt=\"Diagrama Identidad Digital\"></p>\n<h3><span id=\"validación-de-la-identidad\">Validación de la identidad</span></h3>\n<p>Para la realización de este proceso, en lugar de reinventar la rueda, se utilizaron los estándares ya utilizados en la actualidad: el certificado o firma digital asociado a los documentos nacionales de identificación (DNI) suministrados por las autoridades públicas de cada jurisdicción.\nEn este caso, y dada la iniciativa de Estonia a crear un estándar de identificación global, se realizó la lectura de un DNI de esta procedencia.\ne-residency</p>\n<h3><span id=\"verificación-de-la-identidad-suministrada\">Verificación de la identidad suministrada</span></h3>\n<p>La lectura del DNI proporcionará una firma en formato RSA. Esta firma será procesada a través de un Smart Contract (“on-chain”, es decir, dentro de la cadena de bloques en cuestión), asociando automáticamente una dirección de dicha blockchain a la identidad de la persona. De esta manera, se verificará de manera irrefutable (e inmutable) la pertenencia de la dirección firmada a esta identidad.\nUna vez se ha firmado la dirección pública, el usuario podrá utilizarla con asociación directa a su identidad, por lo que este proceso solo deberá realizarse una vez.</p>\n<h3><span id=\"almacenamiento-de-variables-asociadas-a-dicha-identidad\">Almacenamiento de variables asociadas a dicha identidad</span></h3>\n<p>Hecho esto, la persona dispondrá de una identidad digital almacenada en la blockchain o cadena de bloques, pudiendo asociar diferentes datos a ella, y de esta manera haciéndolos públicos e íntegros desde cualquier punto en la blockchain, de forma que cualquier entidad o persona (según el uso que se dé a esta solución) pueda acceder a ellos. Esto será fácilmente realizable a través del uso de Smart Contracts.\nDe esta manera, haciendo uso de la firma digital y la blockchain, logramos desarrollar una verificación segura, pública e interoperable de asociar la identidad de una persona a una clave pública de la blockchain, facilitando la trazabilidad de transacciones y permitiendo agilizar el cumplimiento de políticas de AML/KYC. De hecho, este tipo de soluciones habilitarían una consolidación de este tipo de procesos con los exigidos por la normativa FATCA (Foreign Account Tax Compliance Act), cuestión que será abordada en posteriores artículos.\nEl código desarrollado se encuentra actualmente abierto al público en <a href=\"https://github.com/oraclize/dapp-proof-of-identity.git\" target=\"_blank\" rel=\"external\">Github</a>, subido por Thomas Bertani (en la foto, el primero a la derecha). Por otro lado, el contrato se encuentra subido a la red de pruebas “Morden” de Ethereum, pudiendo observar su almacenamiento en el siguiente enlace.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Uno de los grandes problemas aún no resueltos desde la creación de Internet está asociado a la creación de una identidad digital única en la red. La cuestión envuelve infinidad de variables técnicas, regulatorias y sociales. Sin embargo, alcanzar una solución óptima resultaría de gran importancia especialmente para el sector financiero, en el cual se eliminarían los enormes costes asociados los procesos tradicionales de Know Your Customer (KYC) exigidos en cumplimiento de la normativa de Prevención de Blanqueo de Capitales.\nA la hora de diseñar una solución, cabe plantearse las siguientes preguntas:\n¿Quién verifica que una persona es quien dice ser quién es?\n¿Quién almacena la información asociada a esta persona?\n¿Cómo hacer que dicha información sea verificable y válida para que una entidad financiera permita a un usuario realizar operaciones cumpliendo las políticas relativas a Prevención de Blanqueo de Capitales (AML, por sus siglas en inglés) de forma ágil?</p>\n<p>El pasado mes de Abril, parte del equipo de Grant Thornton, en colaboración con otros compañeros, presentamos una <a href=\"https://github.com/oraclize/dapp-proof-of-identity.git\" target=\"_blank\" rel=\"external\">propuesta a este problema</a> utilizando blockchain en uno de los Hackathons asociados a esta tecnología más importantes a nivel internacional, que daría respuesta a muchas de las preguntas mencionadas. La solución planteada tuvo un gran impacto en la comunidad, siendo incluso mencionado por Vitalik Butterin (creador de Ethereum) durante el evento Consensus2016 que se está celebrando esta semana.\nblockathon_1\nEl equipo que desarrolló la prueba de concepto “Hidentity”.</p>\n<h2>La solución planteada</h2>\n<p>La mayoría de las soluciones basadas en blockchain actualmente disponibles (Bitcoin, Ethereum o Eris, entre otras), funcionan de manera pseudoanónima. Esto quiere decir que cualquier participante de la red tendrá un identificador asociado (su clave pública), que sin embargo no estará asociado a ninguna identidad física.\nEste pseudoanonimato ofrece muchas ventajas en multitud de casos de uso (por ejemplo, para casos de IoT). Sin embargo resulta un inconveniente para muchos otros, en los cuales es necesaria la asociación con la identidad física de la persona. Este es por ejemplo el caso de aquellas operativas relativas al sector financiero.\nCon esta Prueba de Concepto se abordó esta problemática, alcanzando una solución que permitiría actuar sobre la cadena de bloques con una identidad verificada.\nA continuación se muestra la arquitectura de la solución desarrollada, cuyos procesos  serán posteriormente explicados.</p>\n<p><img src=\"/images/id_architecture.png\" alt=\"Diagrama Identidad Digital\"></p>\n<h3>Validación de la identidad</h3>\n<p>Para la realización de este proceso, en lugar de reinventar la rueda, se utilizaron los estándares ya utilizados en la actualidad: el certificado o firma digital asociado a los documentos nacionales de identificación (DNI) suministrados por las autoridades públicas de cada jurisdicción.\nEn este caso, y dada la iniciativa de Estonia a crear un estándar de identificación global, se realizó la lectura de un DNI de esta procedencia.\ne-residency</p>\n<h3>Verificación de la identidad suministrada</h3>\n<p>La lectura del DNI proporcionará una firma en formato RSA. Esta firma será procesada a través de un Smart Contract (“on-chain”, es decir, dentro de la cadena de bloques en cuestión), asociando automáticamente una dirección de dicha blockchain a la identidad de la persona. De esta manera, se verificará de manera irrefutable (e inmutable) la pertenencia de la dirección firmada a esta identidad.\nUna vez se ha firmado la dirección pública, el usuario podrá utilizarla con asociación directa a su identidad, por lo que este proceso solo deberá realizarse una vez.</p>\n<h3>Almacenamiento de variables asociadas a dicha identidad</h3>\n<p>Hecho esto, la persona dispondrá de una identidad digital almacenada en la blockchain o cadena de bloques, pudiendo asociar diferentes datos a ella, y de esta manera haciéndolos públicos e íntegros desde cualquier punto en la blockchain, de forma que cualquier entidad o persona (según el uso que se dé a esta solución) pueda acceder a ellos. Esto será fácilmente realizable a través del uso de Smart Contracts.\nDe esta manera, haciendo uso de la firma digital y la blockchain, logramos desarrollar una verificación segura, pública e interoperable de asociar la identidad de una persona a una clave pública de la blockchain, facilitando la trazabilidad de transacciones y permitiendo agilizar el cumplimiento de políticas de AML/KYC. De hecho, este tipo de soluciones habilitarían una consolidación de este tipo de procesos con los exigidos por la normativa FATCA (Foreign Account Tax Compliance Act), cuestión que será abordada en posteriores artículos.\nEl código desarrollado se encuentra actualmente abierto al público en <a href=\"https://github.com/oraclize/dapp-proof-of-identity.git\" target=\"_blank\" rel=\"external\">Github</a>, subido por Thomas Bertani (en la foto, el primero a la derecha). Por otro lado, el contrato se encuentra subido a la red de pruebas “Morden” de Ethereum, pudiendo observar su almacenamiento en el siguiente enlace.</p>\n"},{"title":"DEVCON2: El 'Mauve Paper de Ethereum'","date":"2016-09-23T19:52:38.000Z","_content":"\nComo anticipamos en anteriores entradas, nos encontramos en Shanghai asistiendo a la semana dedicada a la Blockchain conocida como Blockchain Week. En ella tuvo  lugar segunda edición del evento DEVCON de Ethereum (DEVCON2) del cual obtuvimos una gran cantidad de noticias y buenas sensaciones. Frente a la anterior edición (en la cual se pretendía comprender el potencial de la red y sus elementos intrinsecos) el contenido de esta edición ha estado marcado por los recientes acontecimientos relacionados con el ataque a la aplicación “The DAO”. En este sentido, nos resultó realmente sorprendente la capacidad de reacción de la comunidad, que ha conseguido evolucionar, y desarrollar nuevas prácticas que securicen la red.\nSin embargo, entre todas las ponencias dedicadas a la  securización de la red, destacó la presentación del último “paper” de Ethereum (“Ethereum Mauve Paper”) por Vitalik Butterin (su creador), en la cual mostraba los detalles de lo que será la próxima versión de la red: una blockchain mucho más eficiente y escalable. Esta mejora resulta fundamental  en las redes públicas a día de hoy,  ya que los costes energéticos asociados a su mantenimiento mantienen un crecimiento exponencial desde el momento de despliegue. Además, en terminos de velocidad de procesamiento de transacciones, la blockchain se encuentra realmente lejos de sistemas actuales, tales como Visa o Mastercard, mucho más eficientes en comparativamente debido a su esquema centralizado.\nTal y como se comentó en la ponencia, la nueva versión de Ethereum, o Ethereum 2.0, incorporará numerosas actualizaciones en el protocolo mejorarán estos problemas. Algunas de las más importantes las comentamos a continuación:\n  - **Nuevo mecanismo de consenso (Proof of Stake):** Frente al actual mecanismo de consenso utilizado por las principales blockchain, conocido como Proof of Work, en la nueva versión de Ethereum se eliminará la llamada minería como mecanismo para validar las transacciones. En su lugar, se utilizará el mecanismo conocido como Proof of Stake, en el cual la validación se realiza únicamente a través de incentivos puramente económicos,  De esta manera, se eliminará la dependencia energética, y se consiguirá una mayor velocidad de procesamiento de transacciones, tal como se comenta en el siguiente punto.\n  - **Escalabilidad:** Actualmente, para ejecutar contrato inteligente en la red de Ethereum es necesario descargar un nodo completo, lo que significa descargar el total de transacciones realizadas en la historia de la blockchain (proceso que puede durar varias horas). Esto supone una gran barrera de entrada para nuevos usuarios, impidiendo a aplicaciones realizadas sobre esta red salir de la categoría de aplicaciones nicho. Para solventar este problema, actulmente se encuentran en desarrollo propuestas de clientes ligeros, que permitirían utilizar la red sin necesidad de descargar todo el historial de transacciones. En este aspecto, la futura red de Ethereum utilizará una arquitectura ya conocida para bases de datos (“sharding”), en la cual cada uno de los nodos de la red almacenará una porción de la información total (frente al caso actual, en el que cada uno de los nodos almacena todo el historial).\n  - **Mejora del tiempo de bloque:** Frente a los 14 segundos actuales, los bloques serán generados cada 4 segundos. Esta mejora sustancial (un 28% del tiempo actual), se debe a la implantación de las técnicas descritas en los puntos anteriores.\n  Es de esperar que durante los próximos años se produzca la progresiva aplicación de estos cambios a la futura Ethereum, en su camino hacia la siguiente fase de su desarrollo Ethereum 2.0.  Estos cambios, sin embargo, no se espera que terminen de ser implantados implantados hasta 2020, según el propio creador de la red Vitalik Butterin.\n","source":"_posts/DEVCON2-El-Mauve-Paper-de-Ethereum.md","raw":"---\ntitle: 'DEVCON2: El ''Mauve Paper de Ethereum'''\ndate: 2016-09-23 21:52:38\ntags:\n---\n\nComo anticipamos en anteriores entradas, nos encontramos en Shanghai asistiendo a la semana dedicada a la Blockchain conocida como Blockchain Week. En ella tuvo  lugar segunda edición del evento DEVCON de Ethereum (DEVCON2) del cual obtuvimos una gran cantidad de noticias y buenas sensaciones. Frente a la anterior edición (en la cual se pretendía comprender el potencial de la red y sus elementos intrinsecos) el contenido de esta edición ha estado marcado por los recientes acontecimientos relacionados con el ataque a la aplicación “The DAO”. En este sentido, nos resultó realmente sorprendente la capacidad de reacción de la comunidad, que ha conseguido evolucionar, y desarrollar nuevas prácticas que securicen la red.\nSin embargo, entre todas las ponencias dedicadas a la  securización de la red, destacó la presentación del último “paper” de Ethereum (“Ethereum Mauve Paper”) por Vitalik Butterin (su creador), en la cual mostraba los detalles de lo que será la próxima versión de la red: una blockchain mucho más eficiente y escalable. Esta mejora resulta fundamental  en las redes públicas a día de hoy,  ya que los costes energéticos asociados a su mantenimiento mantienen un crecimiento exponencial desde el momento de despliegue. Además, en terminos de velocidad de procesamiento de transacciones, la blockchain se encuentra realmente lejos de sistemas actuales, tales como Visa o Mastercard, mucho más eficientes en comparativamente debido a su esquema centralizado.\nTal y como se comentó en la ponencia, la nueva versión de Ethereum, o Ethereum 2.0, incorporará numerosas actualizaciones en el protocolo mejorarán estos problemas. Algunas de las más importantes las comentamos a continuación:\n  - **Nuevo mecanismo de consenso (Proof of Stake):** Frente al actual mecanismo de consenso utilizado por las principales blockchain, conocido como Proof of Work, en la nueva versión de Ethereum se eliminará la llamada minería como mecanismo para validar las transacciones. En su lugar, se utilizará el mecanismo conocido como Proof of Stake, en el cual la validación se realiza únicamente a través de incentivos puramente económicos,  De esta manera, se eliminará la dependencia energética, y se consiguirá una mayor velocidad de procesamiento de transacciones, tal como se comenta en el siguiente punto.\n  - **Escalabilidad:** Actualmente, para ejecutar contrato inteligente en la red de Ethereum es necesario descargar un nodo completo, lo que significa descargar el total de transacciones realizadas en la historia de la blockchain (proceso que puede durar varias horas). Esto supone una gran barrera de entrada para nuevos usuarios, impidiendo a aplicaciones realizadas sobre esta red salir de la categoría de aplicaciones nicho. Para solventar este problema, actulmente se encuentran en desarrollo propuestas de clientes ligeros, que permitirían utilizar la red sin necesidad de descargar todo el historial de transacciones. En este aspecto, la futura red de Ethereum utilizará una arquitectura ya conocida para bases de datos (“sharding”), en la cual cada uno de los nodos de la red almacenará una porción de la información total (frente al caso actual, en el que cada uno de los nodos almacena todo el historial).\n  - **Mejora del tiempo de bloque:** Frente a los 14 segundos actuales, los bloques serán generados cada 4 segundos. Esta mejora sustancial (un 28% del tiempo actual), se debe a la implantación de las técnicas descritas en los puntos anteriores.\n  Es de esperar que durante los próximos años se produzca la progresiva aplicación de estos cambios a la futura Ethereum, en su camino hacia la siguiente fase de su desarrollo Ethereum 2.0.  Estos cambios, sin embargo, no se espera que terminen de ser implantados implantados hasta 2020, según el propio creador de la red Vitalik Butterin.\n","slug":"DEVCON2-El-Mauve-Paper-de-Ethereum","published":1,"updated":"2017-10-08T21:34:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcxdx42u00081q1yc6fq80dy","content":"<p>Como anticipamos en anteriores entradas, nos encontramos en Shanghai asistiendo a la semana dedicada a la Blockchain conocida como Blockchain Week. En ella tuvo  lugar segunda edición del evento DEVCON de Ethereum (DEVCON2) del cual obtuvimos una gran cantidad de noticias y buenas sensaciones. Frente a la anterior edición (en la cual se pretendía comprender el potencial de la red y sus elementos intrinsecos) el contenido de esta edición ha estado marcado por los recientes acontecimientos relacionados con el ataque a la aplicación “The DAO”. En este sentido, nos resultó realmente sorprendente la capacidad de reacción de la comunidad, que ha conseguido evolucionar, y desarrollar nuevas prácticas que securicen la red.\nSin embargo, entre todas las ponencias dedicadas a la  securización de la red, destacó la presentación del último “paper” de Ethereum (“Ethereum Mauve Paper”) por Vitalik Butterin (su creador), en la cual mostraba los detalles de lo que será la próxima versión de la red: una blockchain mucho más eficiente y escalable. Esta mejora resulta fundamental  en las redes públicas a día de hoy,  ya que los costes energéticos asociados a su mantenimiento mantienen un crecimiento exponencial desde el momento de despliegue. Además, en terminos de velocidad de procesamiento de transacciones, la blockchain se encuentra realmente lejos de sistemas actuales, tales como Visa o Mastercard, mucho más eficientes en comparativamente debido a su esquema centralizado.\nTal y como se comentó en la ponencia, la nueva versión de Ethereum, o Ethereum 2.0, incorporará numerosas actualizaciones en el protocolo mejorarán estos problemas. Algunas de las más importantes las comentamos a continuación:</p>\n<ul>\n<li><strong>Nuevo mecanismo de consenso (Proof of Stake):</strong> Frente al actual mecanismo de consenso utilizado por las principales blockchain, conocido como Proof of Work, en la nueva versión de Ethereum se eliminará la llamada minería como mecanismo para validar las transacciones. En su lugar, se utilizará el mecanismo conocido como Proof of Stake, en el cual la validación se realiza únicamente a través de incentivos puramente económicos,  De esta manera, se eliminará la dependencia energética, y se consiguirá una mayor velocidad de procesamiento de transacciones, tal como se comenta en el siguiente punto.</li>\n<li><strong>Escalabilidad:</strong> Actualmente, para ejecutar contrato inteligente en la red de Ethereum es necesario descargar un nodo completo, lo que significa descargar el total de transacciones realizadas en la historia de la blockchain (proceso que puede durar varias horas). Esto supone una gran barrera de entrada para nuevos usuarios, impidiendo a aplicaciones realizadas sobre esta red salir de la categoría de aplicaciones nicho. Para solventar este problema, actulmente se encuentran en desarrollo propuestas de clientes ligeros, que permitirían utilizar la red sin necesidad de descargar todo el historial de transacciones. En este aspecto, la futura red de Ethereum utilizará una arquitectura ya conocida para bases de datos (“sharding”), en la cual cada uno de los nodos de la red almacenará una porción de la información total (frente al caso actual, en el que cada uno de los nodos almacena todo el historial).</li>\n<li><strong>Mejora del tiempo de bloque:</strong> Frente a los 14 segundos actuales, los bloques serán generados cada 4 segundos. Esta mejora sustancial (un 28% del tiempo actual), se debe a la implantación de las técnicas descritas en los puntos anteriores.\nEs de esperar que durante los próximos años se produzca la progresiva aplicación de estos cambios a la futura Ethereum, en su camino hacia la siguiente fase de su desarrollo Ethereum 2.0.  Estos cambios, sin embargo, no se espera que terminen de ser implantados implantados hasta 2020, según el propio creador de la red Vitalik Butterin.</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>Como anticipamos en anteriores entradas, nos encontramos en Shanghai asistiendo a la semana dedicada a la Blockchain conocida como Blockchain Week. En ella tuvo  lugar segunda edición del evento DEVCON de Ethereum (DEVCON2) del cual obtuvimos una gran cantidad de noticias y buenas sensaciones. Frente a la anterior edición (en la cual se pretendía comprender el potencial de la red y sus elementos intrinsecos) el contenido de esta edición ha estado marcado por los recientes acontecimientos relacionados con el ataque a la aplicación “The DAO”. En este sentido, nos resultó realmente sorprendente la capacidad de reacción de la comunidad, que ha conseguido evolucionar, y desarrollar nuevas prácticas que securicen la red.\nSin embargo, entre todas las ponencias dedicadas a la  securización de la red, destacó la presentación del último “paper” de Ethereum (“Ethereum Mauve Paper”) por Vitalik Butterin (su creador), en la cual mostraba los detalles de lo que será la próxima versión de la red: una blockchain mucho más eficiente y escalable. Esta mejora resulta fundamental  en las redes públicas a día de hoy,  ya que los costes energéticos asociados a su mantenimiento mantienen un crecimiento exponencial desde el momento de despliegue. Además, en terminos de velocidad de procesamiento de transacciones, la blockchain se encuentra realmente lejos de sistemas actuales, tales como Visa o Mastercard, mucho más eficientes en comparativamente debido a su esquema centralizado.\nTal y como se comentó en la ponencia, la nueva versión de Ethereum, o Ethereum 2.0, incorporará numerosas actualizaciones en el protocolo mejorarán estos problemas. Algunas de las más importantes las comentamos a continuación:</p>\n<ul>\n<li><strong>Nuevo mecanismo de consenso (Proof of Stake):</strong> Frente al actual mecanismo de consenso utilizado por las principales blockchain, conocido como Proof of Work, en la nueva versión de Ethereum se eliminará la llamada minería como mecanismo para validar las transacciones. En su lugar, se utilizará el mecanismo conocido como Proof of Stake, en el cual la validación se realiza únicamente a través de incentivos puramente económicos,  De esta manera, se eliminará la dependencia energética, y se consiguirá una mayor velocidad de procesamiento de transacciones, tal como se comenta en el siguiente punto.</li>\n<li><strong>Escalabilidad:</strong> Actualmente, para ejecutar contrato inteligente en la red de Ethereum es necesario descargar un nodo completo, lo que significa descargar el total de transacciones realizadas en la historia de la blockchain (proceso que puede durar varias horas). Esto supone una gran barrera de entrada para nuevos usuarios, impidiendo a aplicaciones realizadas sobre esta red salir de la categoría de aplicaciones nicho. Para solventar este problema, actulmente se encuentran en desarrollo propuestas de clientes ligeros, que permitirían utilizar la red sin necesidad de descargar todo el historial de transacciones. En este aspecto, la futura red de Ethereum utilizará una arquitectura ya conocida para bases de datos (“sharding”), en la cual cada uno de los nodos de la red almacenará una porción de la información total (frente al caso actual, en el que cada uno de los nodos almacena todo el historial).</li>\n<li><strong>Mejora del tiempo de bloque:</strong> Frente a los 14 segundos actuales, los bloques serán generados cada 4 segundos. Esta mejora sustancial (un 28% del tiempo actual), se debe a la implantación de las técnicas descritas en los puntos anteriores.\nEs de esperar que durante los próximos años se produzca la progresiva aplicación de estos cambios a la futura Ethereum, en su camino hacia la siguiente fase de su desarrollo Ethereum 2.0.  Estos cambios, sin embargo, no se espera que terminen de ser implantados implantados hasta 2020, según el propio creador de la red Vitalik Butterin.</li>\n</ul>\n"},{"title":"Tutorial. ENS en detalle.","date":"2017-10-07T22:47:24.000Z","_content":"\n\n\n\n\n#### Carlos Buendía (@buendiadas)\n\nhttp://buendia.io\n\n\n# ENS: Ethereum name Service\n\n![hello](https://cdn-images-1.medium.com/max/1600/1*U-48MhnGYYpJkxZObAw20w.png)\n\n\n\n## Motivación\n\nSi bien la web necesitaba un estandar para la resolución de nombres legibles en lugar del acceso a IP's, la web3 (o aquello a lo que aspira conseguir Ethereum) necesitará un protocolo similar. En mayor medida si cabe, ya si bien que una IPv4 puede ser incluso legible, una dirección en Hexadecimal como la que encontramos en la figura anterior puede ser una pesadilla. Entre otros motivos, este problema facilita la ejecución de ataques de [phising ](http://buendia.io/htmlposts/tokensale.html#22), ya que un cambio de dirección por el atacante pasará inadvertido por cualquier persona (incluso en muchos casos el dueño de la dirección).\n\nAdemás de las direcciones, podemos comenzar a asociar una multitud de registros nuevos, y, de la misma manera que DNS albergaba diferentes registros (MX,A etc..) comenzar a dirigir peticiones de Swarm, DNS, DNI (para ID's), o multitud de nuevas aplicaciones.\n\n------\n\n## Arquitectura\n\nDe la misma manera que dividimos la arquitectura de DNS en tres diferentes componentes, dividimos la arquitectura de ENS en otros 3:\n\n1. [**ENS** ](https://github.com/ethereum/ens/blob/master/contracts/ENS.sol): Un registro único para todos los dominios de Ethereum. Un Smart contract muy simplón: mapping de los nombres registrados a dos direcciones:\n\n   - La dirección del owner\n   - La dirección del resolver\n   - TTL\n\n   Comparando con la arquitectura DNS, sustituiría la función de los Nameservers.\n\n2. [**El resolver**](https://github.com/ethereum/ens/blob/master/contracts/PublicResolver.sol) Otro mapping, en este caso desde el dominio seleccionado a los diferentes recursos asociados (namespace) .\n\n3. [**Contratos de registro**]: Diseñados para gestionar dominios jerarquicamente inferiores .\n\n------\n\n## Arquitectura\n\n![architecture](https://cdn-images-1.medium.com/max/1600/1*WfSYnum96UqchRJj83xZXA.png)\n\n\n\n------\n\n\n\n## ENS Registry\n\n```javascript\ncontract AbstractENS {\n    function owner(bytes32 node) constant returns(address);\n    function resolver(bytes32 node) constant returns(address);\n    function ttl(bytes32 node) constant returns(uint64);\n    function setOwner(bytes32 node, address owner);\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner);\n    function setResolver(bytes32 node, address resolver);\n    function setTTL(bytes32 node, uint64 ttl);\n\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\n    event Transfer(bytes32 indexed node, address owner);\n    event NewResolver(bytes32 indexed node, address resolver);\n    event NewTTL(bytes32 indexed node, uint64 ttl);\n}\n```\n\n------\n\n## ENS Registry\n\nBásicamente:\n\n```c\n    struct Record {\n        address owner;\n        address resolver;\n        uint64 ttl;\n    }\n\n    mapping(bytes32=>Record) records;\n```\n\n## Namehash\n\n¿Cómo mantenemos cierto grado de privacidad sobre los nodos/Keys/dominios, manteniendo un URI?\n\n```javascript\nvar labels = name.split('.')\n\n    for(var i = labels.length - 1; i >= 0; i--) {\n      var labelSha = sha3(labels[i])\n      node = sha3(new Buffer(node + labelSha, 'hex'))\n    }\n```\n\nBásicamente, haciendo un Keccak hash recursivo de cada \"label\", separada por los puntos.\n\nDefinición: [EIP137](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-137.md)\n\n## Namehash: Implementación\n\n```sh\nnpm install eth-ens-namehash -S\n```\n\n\n\n```javascript\nvar namehash = require('eth-ens-namehash')\nvar hash = namehash('buendia.eth')\n// '0x3b54251663d00d80dfd97b41b67522dd6e85564dec4161e78630a8772bf3be97'\n```\n\n\n\n------\n\n## Registrars\n\n- Contrato con capacidad de registrar subdominios de un registro\n- Fija las normas para registrar estos subdominios\n- Owner de ENS al deployer del contrato (actualmente una multisig)\n- Por jerarquía, el registro principal actualmente es '.eth', un 'auctionRegistrar'\n\n------\n\n## Ejemplo: [FIFS Registrar](https://github.com/ethereum/ens/blob/master/contracts/FIFSRegistrar.sol)\n\n```javascript\nimport './AbstractENS.sol';\n/**\n * A registrar that allocates subdomains to the first person to claim them.\n */\ncontract FIFSRegistrar {\n    AbstractENS ens;\n    bytes32 rootNode;\n  //...\n    function FIFSRegistrar(AbstractENS ensAddr, bytes32 node) {\n        ens = ensAddr;\n        rootNode = node;\n    }\n    function register(bytes32 subnode, address owner) only_owner(subnode) {\n        ens.setSubnodeOwner(rootNode, subnode, owner);\n    }\n}\n```\n\n------\n\n## Ejemplo práctico FIFS (I)\n\nEn la terminal 2:\n\n```sh\n$ testrpc\n```\n\nEn la terminal 1:\n\n```sh\n$ git clone https://github.com/ethereum/ens.git\n$ truffle migrate --network dev.fifs\n$ truffle console\n```\n\nAlmacena las claves migradas (yourENSDeployedAddress, yourFIFSDeployedAddress)\n\n------\n\n## Ejemplo práctico FIFS (II)\n\n```javascript\nconst namehash = require('./node_modules/eth-ens-namehash');\nconst ens = ENS.at(yourENSDeployedAddres);\nconst fifs= FIFSRegistrar.at(yourFIFSDeployedAddress);\nconst tld= 'eth'; // This is by default TLD, probably opened in a future\nconst default_account = web3.eth.accounts[0];\n\nlet node = namehash('eth');\n//'0x93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae'\n\nens.owner(''); //Owner of the ENS Contract\n// default_account\nens.owner(node);\n// FIFS_Registrar\n```\n\n------\n\n## Ejemplo práctico FIFS (III)\n\n```javascript\nlet subnode='buendiadas'; //I want to register my name!\nlet complete_node=subnode + '.' + tld; //buendiadas.eth\nlet curr_account= web3.eth.accounts[1]; //My account!\n\nlet tx = fifs.register(web3.sha3(subnode),curr_account);\nlet new_owner=ens.owner(namehash(complete_node);\nnew_owner\n// My Account!\n```\n\n------\n\n## Resolver\n\n- Acceso al NameSpace del dominio\n- Cada tipo de registro (Recuerda A,MX, etc…) se representa como una nueva interfaz.\n- Actualmente:\n\n| Record type       | Function(s) | Interface ID | Defined in                               |\n| ----------------- | ----------- | ------------ | ---------------------------------------- |\n| Ethereum address  | addr        | 0x3b3b57de   | [EIP137](https://github.com/ethereum/EIPs/issues/137) |\n| ENS Name          | name        | 0x691f3431   | [EIP181](https://github.com/ethereum/EIPs/issues/181) |\n| ABI specification | ABI         | 0x2203ab56   | [EIP205](https://github.com/ethereum/EIPs/pull/205) |\n| Public key        | pubkey      | 0xc8690233   | [EIP619](https://github.com/ethereum/EIPs/pull/619) |\n\n------\n\n## Ejemplo práctico resolver\n\nVamos a llenar el campo address (interfaz 0x3b3b57de)!\n\n```javascript\nconst res_addres= PublicResolver.address;\nens.setResolver(namehash(complete_node), res.address,{from:curr_account});//Only allowed from curr_account!\n\nres.setAddr(namehash(complete_node), web3.eth.accounts[2], {from: curr_account});\ngetAddr('myname.test')\n```\n\n------\n\n# The end\n\n![img](https://s3.amazonaws.com/codementor_content/2015-Aug-week2/cookie.jpg)\n","source":"_posts/ENS-Ethereum-Name-Service-en-detalle.md","raw":"---\ntitle: Tutorial. ENS en detalle.\ndate: 2017-10-08 00:47:24\ntags: ENS,Ethereum,Tutorial\n---\n\n\n\n\n\n#### Carlos Buendía (@buendiadas)\n\nhttp://buendia.io\n\n\n# ENS: Ethereum name Service\n\n![hello](https://cdn-images-1.medium.com/max/1600/1*U-48MhnGYYpJkxZObAw20w.png)\n\n\n\n## Motivación\n\nSi bien la web necesitaba un estandar para la resolución de nombres legibles en lugar del acceso a IP's, la web3 (o aquello a lo que aspira conseguir Ethereum) necesitará un protocolo similar. En mayor medida si cabe, ya si bien que una IPv4 puede ser incluso legible, una dirección en Hexadecimal como la que encontramos en la figura anterior puede ser una pesadilla. Entre otros motivos, este problema facilita la ejecución de ataques de [phising ](http://buendia.io/htmlposts/tokensale.html#22), ya que un cambio de dirección por el atacante pasará inadvertido por cualquier persona (incluso en muchos casos el dueño de la dirección).\n\nAdemás de las direcciones, podemos comenzar a asociar una multitud de registros nuevos, y, de la misma manera que DNS albergaba diferentes registros (MX,A etc..) comenzar a dirigir peticiones de Swarm, DNS, DNI (para ID's), o multitud de nuevas aplicaciones.\n\n------\n\n## Arquitectura\n\nDe la misma manera que dividimos la arquitectura de DNS en tres diferentes componentes, dividimos la arquitectura de ENS en otros 3:\n\n1. [**ENS** ](https://github.com/ethereum/ens/blob/master/contracts/ENS.sol): Un registro único para todos los dominios de Ethereum. Un Smart contract muy simplón: mapping de los nombres registrados a dos direcciones:\n\n   - La dirección del owner\n   - La dirección del resolver\n   - TTL\n\n   Comparando con la arquitectura DNS, sustituiría la función de los Nameservers.\n\n2. [**El resolver**](https://github.com/ethereum/ens/blob/master/contracts/PublicResolver.sol) Otro mapping, en este caso desde el dominio seleccionado a los diferentes recursos asociados (namespace) .\n\n3. [**Contratos de registro**]: Diseñados para gestionar dominios jerarquicamente inferiores .\n\n------\n\n## Arquitectura\n\n![architecture](https://cdn-images-1.medium.com/max/1600/1*WfSYnum96UqchRJj83xZXA.png)\n\n\n\n------\n\n\n\n## ENS Registry\n\n```javascript\ncontract AbstractENS {\n    function owner(bytes32 node) constant returns(address);\n    function resolver(bytes32 node) constant returns(address);\n    function ttl(bytes32 node) constant returns(uint64);\n    function setOwner(bytes32 node, address owner);\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner);\n    function setResolver(bytes32 node, address resolver);\n    function setTTL(bytes32 node, uint64 ttl);\n\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\n    event Transfer(bytes32 indexed node, address owner);\n    event NewResolver(bytes32 indexed node, address resolver);\n    event NewTTL(bytes32 indexed node, uint64 ttl);\n}\n```\n\n------\n\n## ENS Registry\n\nBásicamente:\n\n```c\n    struct Record {\n        address owner;\n        address resolver;\n        uint64 ttl;\n    }\n\n    mapping(bytes32=>Record) records;\n```\n\n## Namehash\n\n¿Cómo mantenemos cierto grado de privacidad sobre los nodos/Keys/dominios, manteniendo un URI?\n\n```javascript\nvar labels = name.split('.')\n\n    for(var i = labels.length - 1; i >= 0; i--) {\n      var labelSha = sha3(labels[i])\n      node = sha3(new Buffer(node + labelSha, 'hex'))\n    }\n```\n\nBásicamente, haciendo un Keccak hash recursivo de cada \"label\", separada por los puntos.\n\nDefinición: [EIP137](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-137.md)\n\n## Namehash: Implementación\n\n```sh\nnpm install eth-ens-namehash -S\n```\n\n\n\n```javascript\nvar namehash = require('eth-ens-namehash')\nvar hash = namehash('buendia.eth')\n// '0x3b54251663d00d80dfd97b41b67522dd6e85564dec4161e78630a8772bf3be97'\n```\n\n\n\n------\n\n## Registrars\n\n- Contrato con capacidad de registrar subdominios de un registro\n- Fija las normas para registrar estos subdominios\n- Owner de ENS al deployer del contrato (actualmente una multisig)\n- Por jerarquía, el registro principal actualmente es '.eth', un 'auctionRegistrar'\n\n------\n\n## Ejemplo: [FIFS Registrar](https://github.com/ethereum/ens/blob/master/contracts/FIFSRegistrar.sol)\n\n```javascript\nimport './AbstractENS.sol';\n/**\n * A registrar that allocates subdomains to the first person to claim them.\n */\ncontract FIFSRegistrar {\n    AbstractENS ens;\n    bytes32 rootNode;\n  //...\n    function FIFSRegistrar(AbstractENS ensAddr, bytes32 node) {\n        ens = ensAddr;\n        rootNode = node;\n    }\n    function register(bytes32 subnode, address owner) only_owner(subnode) {\n        ens.setSubnodeOwner(rootNode, subnode, owner);\n    }\n}\n```\n\n------\n\n## Ejemplo práctico FIFS (I)\n\nEn la terminal 2:\n\n```sh\n$ testrpc\n```\n\nEn la terminal 1:\n\n```sh\n$ git clone https://github.com/ethereum/ens.git\n$ truffle migrate --network dev.fifs\n$ truffle console\n```\n\nAlmacena las claves migradas (yourENSDeployedAddress, yourFIFSDeployedAddress)\n\n------\n\n## Ejemplo práctico FIFS (II)\n\n```javascript\nconst namehash = require('./node_modules/eth-ens-namehash');\nconst ens = ENS.at(yourENSDeployedAddres);\nconst fifs= FIFSRegistrar.at(yourFIFSDeployedAddress);\nconst tld= 'eth'; // This is by default TLD, probably opened in a future\nconst default_account = web3.eth.accounts[0];\n\nlet node = namehash('eth');\n//'0x93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae'\n\nens.owner(''); //Owner of the ENS Contract\n// default_account\nens.owner(node);\n// FIFS_Registrar\n```\n\n------\n\n## Ejemplo práctico FIFS (III)\n\n```javascript\nlet subnode='buendiadas'; //I want to register my name!\nlet complete_node=subnode + '.' + tld; //buendiadas.eth\nlet curr_account= web3.eth.accounts[1]; //My account!\n\nlet tx = fifs.register(web3.sha3(subnode),curr_account);\nlet new_owner=ens.owner(namehash(complete_node);\nnew_owner\n// My Account!\n```\n\n------\n\n## Resolver\n\n- Acceso al NameSpace del dominio\n- Cada tipo de registro (Recuerda A,MX, etc…) se representa como una nueva interfaz.\n- Actualmente:\n\n| Record type       | Function(s) | Interface ID | Defined in                               |\n| ----------------- | ----------- | ------------ | ---------------------------------------- |\n| Ethereum address  | addr        | 0x3b3b57de   | [EIP137](https://github.com/ethereum/EIPs/issues/137) |\n| ENS Name          | name        | 0x691f3431   | [EIP181](https://github.com/ethereum/EIPs/issues/181) |\n| ABI specification | ABI         | 0x2203ab56   | [EIP205](https://github.com/ethereum/EIPs/pull/205) |\n| Public key        | pubkey      | 0xc8690233   | [EIP619](https://github.com/ethereum/EIPs/pull/619) |\n\n------\n\n## Ejemplo práctico resolver\n\nVamos a llenar el campo address (interfaz 0x3b3b57de)!\n\n```javascript\nconst res_addres= PublicResolver.address;\nens.setResolver(namehash(complete_node), res.address,{from:curr_account});//Only allowed from curr_account!\n\nres.setAddr(namehash(complete_node), web3.eth.accounts[2], {from: curr_account});\ngetAddr('myname.test')\n```\n\n------\n\n# The end\n\n![img](https://s3.amazonaws.com/codementor_content/2015-Aug-week2/cookie.jpg)\n","slug":"ENS-Ethereum-Name-Service-en-detalle","published":1,"updated":"2017-10-08T21:34:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcxdx42x000a1q1yv79h8z9y","content":"<h4><span id=\"carlos-buendía-buendiadas\">Carlos Buendía (@buendiadas)</span></h4>\n<p>http://buendia.io</p>\n<h1><span id=\"ens-ethereum-name-service\">ENS: Ethereum name Service</span></h1>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*U-48MhnGYYpJkxZObAw20w.png\" alt=\"hello\"></p>\n<h2><span id=\"motivación\">Motivación</span></h2>\n<p>Si bien la web necesitaba un estandar para la resolución de nombres legibles en lugar del acceso a IP's, la web3 (o aquello a lo que aspira conseguir Ethereum) necesitará un protocolo similar. En mayor medida si cabe, ya si bien que una IPv4 puede ser incluso legible, una dirección en Hexadecimal como la que encontramos en la figura anterior puede ser una pesadilla. Entre otros motivos, este problema facilita la ejecución de ataques de <a href=\"http://buendia.io/htmlposts/tokensale.html#22\" target=\"_blank\" rel=\"external\">phising </a>, ya que un cambio de dirección por el atacante pasará inadvertido por cualquier persona (incluso en muchos casos el dueño de la dirección).</p>\n<p>Además de las direcciones, podemos comenzar a asociar una multitud de registros nuevos, y, de la misma manera que DNS albergaba diferentes registros (MX,A etc..) comenzar a dirigir peticiones de Swarm, DNS, DNI (para ID's), o multitud de nuevas aplicaciones.</p>\n<hr>\n<h2><span id=\"arquitectura\">Arquitectura</span></h2>\n<p>De la misma manera que dividimos la arquitectura de DNS en tres diferentes componentes, dividimos la arquitectura de ENS en otros 3:</p>\n<ol>\n<li>\n<p><a href=\"https://github.com/ethereum/ens/blob/master/contracts/ENS.sol\" target=\"_blank\" rel=\"external\"><strong>ENS</strong> </a>: Un registro único para todos los dominios de Ethereum. Un Smart contract muy simplón: mapping de los nombres registrados a dos direcciones:</p>\n<ul>\n<li>La dirección del owner</li>\n<li>La dirección del resolver</li>\n<li>TTL</li>\n</ul>\n<p>Comparando con la arquitectura DNS, sustituiría la función de los Nameservers.</p>\n</li>\n<li>\n<p><a href=\"https://github.com/ethereum/ens/blob/master/contracts/PublicResolver.sol\" target=\"_blank\" rel=\"external\"><strong>El resolver</strong></a> Otro mapping, en este caso desde el dominio seleccionado a los diferentes recursos asociados (namespace) .</p>\n</li>\n<li>\n<p>[<strong>Contratos de registro</strong>]: Diseñados para gestionar dominios jerarquicamente inferiores .</p>\n</li>\n</ol>\n<hr>\n<h2><span id=\"arquitectura\">Arquitectura</span></h2>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*WfSYnum96UqchRJj83xZXA.png\" alt=\"architecture\"></p>\n<hr>\n<h2><span id=\"ens-registry\">ENS Registry</span></h2>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">contract AbstractENS &#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">owner</span>(<span class=\"params\">bytes32 node</span>) <span class=\"title\">constant</span> <span class=\"title\">returns</span>(<span class=\"params\">address</span>);</span></div><div class=\"line\"><span class=\"function\">    <span class=\"title\">function</span> <span class=\"title\">resolver</span>(<span class=\"params\">bytes32 node</span>) <span class=\"title\">constant</span> <span class=\"title\">returns</span>(<span class=\"params\">address</span>);</span></div><div class=\"line\"><span class=\"function\">    <span class=\"title\">function</span> <span class=\"title\">ttl</span>(<span class=\"params\">bytes32 node</span>) <span class=\"title\">constant</span> <span class=\"title\">returns</span>(<span class=\"params\">uint64</span>);</span></div><div class=\"line\"><span class=\"function\">    <span class=\"title\">function</span> <span class=\"title\">setOwner</span>(<span class=\"params\">bytes32 node, address owner</span>);</span></div><div class=\"line\"><span class=\"function\">    <span class=\"title\">function</span> <span class=\"title\">setSubnodeOwner</span>(<span class=\"params\">bytes32 node, bytes32 label, address owner</span>);</span></div><div class=\"line\"><span class=\"function\">    <span class=\"title\">function</span> <span class=\"title\">setResolver</span>(<span class=\"params\">bytes32 node, address resolver</span>);</span></div><div class=\"line\"><span class=\"function\">    <span class=\"title\">function</span> <span class=\"title\">setTTL</span>(<span class=\"params\">bytes32 node, uint64 ttl</span>);</span></div><div class=\"line\"><span class=\"function\"></span></div><div class=\"line\"><span class=\"function\">    <span class=\"title\">event</span> <span class=\"title\">NewOwner</span>(<span class=\"params\">bytes32 indexed node, bytes32 indexed label, address owner</span>);</span></div><div class=\"line\"><span class=\"function\">    <span class=\"title\">event</span> <span class=\"title\">Transfer</span>(<span class=\"params\">bytes32 indexed node, address owner</span>);</span></div><div class=\"line\"><span class=\"function\">    <span class=\"title\">event</span> <span class=\"title\">NewResolver</span>(<span class=\"params\">bytes32 indexed node, address resolver</span>);</span></div><div class=\"line\"><span class=\"function\">    <span class=\"title\">event</span> <span class=\"title\">NewTTL</span>(<span class=\"params\">bytes32 indexed node, uint64 ttl</span>);</span></div><div class=\"line\"><span class=\"function\">&#125;</span></div></pre></td></tr></table></figure></p>\n<hr>\n<h2><span id=\"ens-registry\">ENS Registry</span></h2>\n<p>Básicamente:</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Record</span> &#123;</span></div><div class=\"line\">    address owner;</div><div class=\"line\">    address resolver;</div><div class=\"line\">    uint64 ttl;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">mapping(bytes32=&gt;Record) records;</div></pre></td></tr></table></figure></p>\n<h2><span id=\"namehash\">Namehash</span></h2>\n<p>¿Cómo mantenemos cierto grado de privacidad sobre los nodos/Keys/dominios, manteniendo un URI?</p>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> labels = name.split(<span class=\"string\">'.'</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = labels.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> labelSha = sha3(labels[i])</div><div class=\"line\">      node = sha3(<span class=\"keyword\">new</span> Buffer(node + labelSha, <span class=\"string\">'hex'</span>))</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>Básicamente, haciendo un Keccak hash recursivo de cada &quot;label&quot;, separada por los puntos.</p>\n<p>Definición: <a href=\"https://github.com/ethereum/EIPs/blob/master/EIPS/eip-137.md\" target=\"_blank\" rel=\"external\">EIP137</a></p>\n<h2><span id=\"namehash-implementación\">Namehash: Implementación</span></h2>\n<p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install eth-ens-namehash -S</div></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> namehash = <span class=\"built_in\">require</span>(<span class=\"string\">'eth-ens-namehash'</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> hash = namehash(<span class=\"string\">'buendia.eth'</span>)</div><div class=\"line\"><span class=\"comment\">// '0x3b54251663d00d80dfd97b41b67522dd6e85564dec4161e78630a8772bf3be97'</span></div></pre></td></tr></table></figure></p>\n<hr>\n<h2><span id=\"registrars\">Registrars</span></h2>\n<ul>\n<li>Contrato con capacidad de registrar subdominios de un registro</li>\n<li>Fija las normas para registrar estos subdominios</li>\n<li>Owner de ENS al deployer del contrato (actualmente una multisig)</li>\n<li>Por jerarquía, el registro principal actualmente es '.eth', un 'auctionRegistrar'</li>\n</ul>\n<hr>\n<h2><span id=\"ejemplo-fifs-registrar\">Ejemplo: </span></h2>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./AbstractENS.sol'</span>;</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * A registrar that allocates subdomains to the first person to claim them.</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\">contract FIFSRegistrar &#123;</div><div class=\"line\">    AbstractENS ens;</div><div class=\"line\">    bytes32 rootNode;</div><div class=\"line\">  <span class=\"comment\">//...</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">FIFSRegistrar</span>(<span class=\"params\">AbstractENS ensAddr, bytes32 node</span>) </span>&#123;</div><div class=\"line\">        ens = ensAddr;</div><div class=\"line\">        rootNode = node;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">register</span>(<span class=\"params\">bytes32 subnode, address owner</span>) <span class=\"title\">only_owner</span>(<span class=\"params\">subnode</span>) </span>&#123;</div><div class=\"line\">        ens.setSubnodeOwner(rootNode, subnode, owner);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<hr>\n<h2><span id=\"ejemplo-práctico-fifs-i\">Ejemplo práctico FIFS (I)</span></h2>\n<p>En la terminal 2:</p>\n<p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ testrpc</div></pre></td></tr></table></figure></p>\n<p>En la terminal 1:</p>\n<p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/ethereum/ens.git</div><div class=\"line\">$ truffle migrate --network dev.fifs</div><div class=\"line\">$ truffle console</div></pre></td></tr></table></figure></p>\n<p>Almacena las claves migradas (yourENSDeployedAddress, yourFIFSDeployedAddress)</p>\n<hr>\n<h2><span id=\"ejemplo-práctico-fifs-ii\">Ejemplo práctico FIFS (II)</span></h2>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> namehash = <span class=\"built_in\">require</span>(<span class=\"string\">'./node_modules/eth-ens-namehash'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> ens = ENS.at(yourENSDeployedAddres);</div><div class=\"line\"><span class=\"keyword\">const</span> fifs= FIFSRegistrar.at(yourFIFSDeployedAddress);</div><div class=\"line\"><span class=\"keyword\">const</span> tld= <span class=\"string\">'eth'</span>; <span class=\"comment\">// This is by default TLD, probably opened in a future</span></div><div class=\"line\"><span class=\"keyword\">const</span> default_account = web3.eth.accounts[<span class=\"number\">0</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> node = namehash(<span class=\"string\">'eth'</span>);</div><div class=\"line\"><span class=\"comment\">//'0x93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae'</span></div><div class=\"line\"></div><div class=\"line\">ens.owner(<span class=\"string\">''</span>); <span class=\"comment\">//Owner of the ENS Contract</span></div><div class=\"line\"><span class=\"comment\">// default_account</span></div><div class=\"line\">ens.owner(node);</div><div class=\"line\"><span class=\"comment\">// FIFS_Registrar</span></div></pre></td></tr></table></figure></p>\n<hr>\n<h2><span id=\"ejemplo-práctico-fifs-iii\">Ejemplo práctico FIFS (III)</span></h2>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> subnode=<span class=\"string\">'buendiadas'</span>; <span class=\"comment\">//I want to register my name!</span></div><div class=\"line\"><span class=\"keyword\">let</span> complete_node=subnode + <span class=\"string\">'.'</span> + tld; <span class=\"comment\">//buendiadas.eth</span></div><div class=\"line\"><span class=\"keyword\">let</span> curr_account= web3.eth.accounts[<span class=\"number\">1</span>]; <span class=\"comment\">//My account!</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> tx = fifs.register(web3.sha3(subnode),curr_account);</div><div class=\"line\"><span class=\"keyword\">let</span> new_owner=ens.owner(namehash(complete_node);</div><div class=\"line\">new_owner</div><div class=\"line\"><span class=\"comment\">// My Account!</span></div></pre></td></tr></table></figure></p>\n<hr>\n<h2><span id=\"resolver\">Resolver</span></h2>\n<ul>\n<li>Acceso al NameSpace del dominio</li>\n<li>Cada tipo de registro (Recuerda A,MX, etc…) se representa como una nueva interfaz.</li>\n<li>Actualmente:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Record type</th>\n<th>Function(s)</th>\n<th>Interface ID</th>\n<th>Defined in</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Ethereum address</td>\n<td>addr</td>\n<td>0x3b3b57de</td>\n<td><a href=\"https://github.com/ethereum/EIPs/issues/137\" target=\"_blank\" rel=\"external\">EIP137</a></td>\n</tr>\n<tr>\n<td>ENS Name</td>\n<td>name</td>\n<td>0x691f3431</td>\n<td><a href=\"https://github.com/ethereum/EIPs/issues/181\" target=\"_blank\" rel=\"external\">EIP181</a></td>\n</tr>\n<tr>\n<td>ABI specification</td>\n<td>ABI</td>\n<td>0x2203ab56</td>\n<td><a href=\"https://github.com/ethereum/EIPs/pull/205\" target=\"_blank\" rel=\"external\">EIP205</a></td>\n</tr>\n<tr>\n<td>Public key</td>\n<td>pubkey</td>\n<td>0xc8690233</td>\n<td><a href=\"https://github.com/ethereum/EIPs/pull/619\" target=\"_blank\" rel=\"external\">EIP619</a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2><span id=\"ejemplo-práctico-resolver\">Ejemplo práctico resolver</span></h2>\n<p>Vamos a llenar el campo address (interfaz 0x3b3b57de)!</p>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> res_addres= PublicResolver.address;</div><div class=\"line\">ens.setResolver(namehash(complete_node), res.address,&#123;<span class=\"attr\">from</span>:curr_account&#125;);<span class=\"comment\">//Only allowed from curr_account!</span></div><div class=\"line\"></div><div class=\"line\">res.setAddr(namehash(complete_node), web3.eth.accounts[<span class=\"number\">2</span>], &#123;<span class=\"attr\">from</span>: curr_account&#125;);</div><div class=\"line\">getAddr(<span class=\"string\">'myname.test'</span>)</div></pre></td></tr></table></figure></p>\n<hr>\n<h1><span id=\"the-end\">The end</span></h1>\n<p><img src=\"https://s3.amazonaws.com/codementor_content/2015-Aug-week2/cookie.jpg\" alt=\"img\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h4>Carlos Buendía (@buendiadas)</h4>\n<p>http://buendia.io</p>\n<h1>ENS: Ethereum name Service</h1>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*U-48MhnGYYpJkxZObAw20w.png\" alt=\"hello\"></p>\n<h2>Motivación</h2>\n<p>Si bien la web necesitaba un estandar para la resolución de nombres legibles en lugar del acceso a IP's, la web3 (o aquello a lo que aspira conseguir Ethereum) necesitará un protocolo similar. En mayor medida si cabe, ya si bien que una IPv4 puede ser incluso legible, una dirección en Hexadecimal como la que encontramos en la figura anterior puede ser una pesadilla. Entre otros motivos, este problema facilita la ejecución de ataques de <a href=\"http://buendia.io/htmlposts/tokensale.html#22\" target=\"_blank\" rel=\"external\">phising </a>, ya que un cambio de dirección por el atacante pasará inadvertido por cualquier persona (incluso en muchos casos el dueño de la dirección).</p>\n<p>Además de las direcciones, podemos comenzar a asociar una multitud de registros nuevos, y, de la misma manera que DNS albergaba diferentes registros (MX,A etc..) comenzar a dirigir peticiones de Swarm, DNS, DNI (para ID's), o multitud de nuevas aplicaciones.</p>\n<hr>\n<h2>Arquitectura</h2>\n<p>De la misma manera que dividimos la arquitectura de DNS en tres diferentes componentes, dividimos la arquitectura de ENS en otros 3:</p>\n<ol>\n<li>\n<p><a href=\"https://github.com/ethereum/ens/blob/master/contracts/ENS.sol\" target=\"_blank\" rel=\"external\"><strong>ENS</strong> </a>: Un registro único para todos los dominios de Ethereum. Un Smart contract muy simplón: mapping de los nombres registrados a dos direcciones:</p>\n<ul>\n<li>La dirección del owner</li>\n<li>La dirección del resolver</li>\n<li>TTL</li>\n</ul>\n<p>Comparando con la arquitectura DNS, sustituiría la función de los Nameservers.</p>\n</li>\n<li>\n<p><a href=\"https://github.com/ethereum/ens/blob/master/contracts/PublicResolver.sol\" target=\"_blank\" rel=\"external\"><strong>El resolver</strong></a> Otro mapping, en este caso desde el dominio seleccionado a los diferentes recursos asociados (namespace) .</p>\n</li>\n<li>\n<p>[<strong>Contratos de registro</strong>]: Diseñados para gestionar dominios jerarquicamente inferiores .</p>\n</li>\n</ol>\n<hr>\n<h2>Arquitectura</h2>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*WfSYnum96UqchRJj83xZXA.png\" alt=\"architecture\"></p>\n<hr>\n<h2>ENS Registry</h2>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">contract AbstractENS &#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">owner</span>(<span class=\"params\">bytes32 node</span>) <span class=\"title\">constant</span> <span class=\"title\">returns</span>(<span class=\"params\">address</span>);</span></div><div class=\"line\"><span class=\"function\">    <span class=\"title\">function</span> <span class=\"title\">resolver</span>(<span class=\"params\">bytes32 node</span>) <span class=\"title\">constant</span> <span class=\"title\">returns</span>(<span class=\"params\">address</span>);</span></div><div class=\"line\"><span class=\"function\">    <span class=\"title\">function</span> <span class=\"title\">ttl</span>(<span class=\"params\">bytes32 node</span>) <span class=\"title\">constant</span> <span class=\"title\">returns</span>(<span class=\"params\">uint64</span>);</span></div><div class=\"line\"><span class=\"function\">    <span class=\"title\">function</span> <span class=\"title\">setOwner</span>(<span class=\"params\">bytes32 node, address owner</span>);</span></div><div class=\"line\"><span class=\"function\">    <span class=\"title\">function</span> <span class=\"title\">setSubnodeOwner</span>(<span class=\"params\">bytes32 node, bytes32 label, address owner</span>);</span></div><div class=\"line\"><span class=\"function\">    <span class=\"title\">function</span> <span class=\"title\">setResolver</span>(<span class=\"params\">bytes32 node, address resolver</span>);</span></div><div class=\"line\"><span class=\"function\">    <span class=\"title\">function</span> <span class=\"title\">setTTL</span>(<span class=\"params\">bytes32 node, uint64 ttl</span>);</span></div><div class=\"line\"><span class=\"function\"></span></div><div class=\"line\"><span class=\"function\">    <span class=\"title\">event</span> <span class=\"title\">NewOwner</span>(<span class=\"params\">bytes32 indexed node, bytes32 indexed label, address owner</span>);</span></div><div class=\"line\"><span class=\"function\">    <span class=\"title\">event</span> <span class=\"title\">Transfer</span>(<span class=\"params\">bytes32 indexed node, address owner</span>);</span></div><div class=\"line\"><span class=\"function\">    <span class=\"title\">event</span> <span class=\"title\">NewResolver</span>(<span class=\"params\">bytes32 indexed node, address resolver</span>);</span></div><div class=\"line\"><span class=\"function\">    <span class=\"title\">event</span> <span class=\"title\">NewTTL</span>(<span class=\"params\">bytes32 indexed node, uint64 ttl</span>);</span></div><div class=\"line\"><span class=\"function\">&#125;</span></div></pre></td></tr></table></figure></p>\n<hr>\n<h2>ENS Registry</h2>\n<p>Básicamente:</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Record</span> &#123;</span></div><div class=\"line\">    address owner;</div><div class=\"line\">    address resolver;</div><div class=\"line\">    uint64 ttl;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">mapping(bytes32=&gt;Record) records;</div></pre></td></tr></table></figure></p>\n<h2>Namehash</h2>\n<p>¿Cómo mantenemos cierto grado de privacidad sobre los nodos/Keys/dominios, manteniendo un URI?</p>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> labels = name.split(<span class=\"string\">'.'</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = labels.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> labelSha = sha3(labels[i])</div><div class=\"line\">      node = sha3(<span class=\"keyword\">new</span> Buffer(node + labelSha, <span class=\"string\">'hex'</span>))</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>Básicamente, haciendo un Keccak hash recursivo de cada &quot;label&quot;, separada por los puntos.</p>\n<p>Definición: <a href=\"https://github.com/ethereum/EIPs/blob/master/EIPS/eip-137.md\" target=\"_blank\" rel=\"external\">EIP137</a></p>\n<h2>Namehash: Implementación</h2>\n<p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install eth-ens-namehash -S</div></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> namehash = <span class=\"built_in\">require</span>(<span class=\"string\">'eth-ens-namehash'</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> hash = namehash(<span class=\"string\">'buendia.eth'</span>)</div><div class=\"line\"><span class=\"comment\">// '0x3b54251663d00d80dfd97b41b67522dd6e85564dec4161e78630a8772bf3be97'</span></div></pre></td></tr></table></figure></p>\n<hr>\n<h2>Registrars</h2>\n<ul>\n<li>Contrato con capacidad de registrar subdominios de un registro</li>\n<li>Fija las normas para registrar estos subdominios</li>\n<li>Owner de ENS al deployer del contrato (actualmente una multisig)</li>\n<li>Por jerarquía, el registro principal actualmente es '.eth', un 'auctionRegistrar'</li>\n</ul>\n<hr>\n<h2>Ejemplo: <a href=\"https://github.com/ethereum/ens/blob/master/contracts/FIFSRegistrar.sol\" target=\"_blank\" rel=\"external\">FIFS Registrar</a></h2>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./AbstractENS.sol'</span>;</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * A registrar that allocates subdomains to the first person to claim them.</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\">contract FIFSRegistrar &#123;</div><div class=\"line\">    AbstractENS ens;</div><div class=\"line\">    bytes32 rootNode;</div><div class=\"line\">  <span class=\"comment\">//...</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">FIFSRegistrar</span>(<span class=\"params\">AbstractENS ensAddr, bytes32 node</span>) </span>&#123;</div><div class=\"line\">        ens = ensAddr;</div><div class=\"line\">        rootNode = node;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">register</span>(<span class=\"params\">bytes32 subnode, address owner</span>) <span class=\"title\">only_owner</span>(<span class=\"params\">subnode</span>) </span>&#123;</div><div class=\"line\">        ens.setSubnodeOwner(rootNode, subnode, owner);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<hr>\n<h2>Ejemplo práctico FIFS (I)</h2>\n<p>En la terminal 2:</p>\n<p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ testrpc</div></pre></td></tr></table></figure></p>\n<p>En la terminal 1:</p>\n<p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/ethereum/ens.git</div><div class=\"line\">$ truffle migrate --network dev.fifs</div><div class=\"line\">$ truffle console</div></pre></td></tr></table></figure></p>\n<p>Almacena las claves migradas (yourENSDeployedAddress, yourFIFSDeployedAddress)</p>\n<hr>\n<h2>Ejemplo práctico FIFS (II)</h2>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> namehash = <span class=\"built_in\">require</span>(<span class=\"string\">'./node_modules/eth-ens-namehash'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> ens = ENS.at(yourENSDeployedAddres);</div><div class=\"line\"><span class=\"keyword\">const</span> fifs= FIFSRegistrar.at(yourFIFSDeployedAddress);</div><div class=\"line\"><span class=\"keyword\">const</span> tld= <span class=\"string\">'eth'</span>; <span class=\"comment\">// This is by default TLD, probably opened in a future</span></div><div class=\"line\"><span class=\"keyword\">const</span> default_account = web3.eth.accounts[<span class=\"number\">0</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> node = namehash(<span class=\"string\">'eth'</span>);</div><div class=\"line\"><span class=\"comment\">//'0x93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae'</span></div><div class=\"line\"></div><div class=\"line\">ens.owner(<span class=\"string\">''</span>); <span class=\"comment\">//Owner of the ENS Contract</span></div><div class=\"line\"><span class=\"comment\">// default_account</span></div><div class=\"line\">ens.owner(node);</div><div class=\"line\"><span class=\"comment\">// FIFS_Registrar</span></div></pre></td></tr></table></figure></p>\n<hr>\n<h2>Ejemplo práctico FIFS (III)</h2>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> subnode=<span class=\"string\">'buendiadas'</span>; <span class=\"comment\">//I want to register my name!</span></div><div class=\"line\"><span class=\"keyword\">let</span> complete_node=subnode + <span class=\"string\">'.'</span> + tld; <span class=\"comment\">//buendiadas.eth</span></div><div class=\"line\"><span class=\"keyword\">let</span> curr_account= web3.eth.accounts[<span class=\"number\">1</span>]; <span class=\"comment\">//My account!</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> tx = fifs.register(web3.sha3(subnode),curr_account);</div><div class=\"line\"><span class=\"keyword\">let</span> new_owner=ens.owner(namehash(complete_node);</div><div class=\"line\">new_owner</div><div class=\"line\"><span class=\"comment\">// My Account!</span></div></pre></td></tr></table></figure></p>\n<hr>\n<h2>Resolver</h2>\n<ul>\n<li>Acceso al NameSpace del dominio</li>\n<li>Cada tipo de registro (Recuerda A,MX, etc…) se representa como una nueva interfaz.</li>\n<li>Actualmente:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Record type</th>\n<th>Function(s)</th>\n<th>Interface ID</th>\n<th>Defined in</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Ethereum address</td>\n<td>addr</td>\n<td>0x3b3b57de</td>\n<td><a href=\"https://github.com/ethereum/EIPs/issues/137\" target=\"_blank\" rel=\"external\">EIP137</a></td>\n</tr>\n<tr>\n<td>ENS Name</td>\n<td>name</td>\n<td>0x691f3431</td>\n<td><a href=\"https://github.com/ethereum/EIPs/issues/181\" target=\"_blank\" rel=\"external\">EIP181</a></td>\n</tr>\n<tr>\n<td>ABI specification</td>\n<td>ABI</td>\n<td>0x2203ab56</td>\n<td><a href=\"https://github.com/ethereum/EIPs/pull/205\" target=\"_blank\" rel=\"external\">EIP205</a></td>\n</tr>\n<tr>\n<td>Public key</td>\n<td>pubkey</td>\n<td>0xc8690233</td>\n<td><a href=\"https://github.com/ethereum/EIPs/pull/619\" target=\"_blank\" rel=\"external\">EIP619</a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2>Ejemplo práctico resolver</h2>\n<p>Vamos a llenar el campo address (interfaz 0x3b3b57de)!</p>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> res_addres= PublicResolver.address;</div><div class=\"line\">ens.setResolver(namehash(complete_node), res.address,&#123;<span class=\"attr\">from</span>:curr_account&#125;);<span class=\"comment\">//Only allowed from curr_account!</span></div><div class=\"line\"></div><div class=\"line\">res.setAddr(namehash(complete_node), web3.eth.accounts[<span class=\"number\">2</span>], &#123;<span class=\"attr\">from</span>: curr_account&#125;);</div><div class=\"line\">getAddr(<span class=\"string\">'myname.test'</span>)</div></pre></td></tr></table></figure></p>\n<hr>\n<h1>The end</h1>\n<p><img src=\"https://s3.amazonaws.com/codementor_content/2015-Aug-week2/cookie.jpg\" alt=\"img\"></p>\n"},{"title":"Curso de introducción Ethereum para desarrolladores","date":"2017-03-24T23:47:24.000Z","_content":"\n\n{% iframe https://buendiadas.github.io/htmlposts/ethereum.html 100% 400px %}\n\n\nDejo a continuación los slides del curso de Ethereum para desarrolladores que se impartió a través de DevAcademy:\n\n\n - [Introducción a Ethereum](https://buendiadas.github.io/htmlposts/ethereum.html): donde se hace una breve introducción a la arquitectura general.\n - [Introduccion a Web3](https://buendiadas.github.io/htmlposts/ethereum.html) en el que se hace una introducción a la librería web3.js\n - [Introducción a Solidity](https://buendiadas.github.io/htmlposts/solidity.html), donde se hacen ejercicios y comienzan a desarrollar Smart Contracts.\n\n\n Las slides están realizadas en abierto a través de la librería [Remarkjs](https://github.com/gnab/remark). Si quieres contribuir, editandolas o majorándolas, PR son bienvenidos. A continuación, el link del repo:\n\n\n https://github.com/buendiadas/curso-ethereum\n","source":"_posts/curso-ethereum.md","raw":"---\ntitle: Curso de introducción Ethereum para desarrolladores\ndate: 2017-03-25 00:47:24\ntags: Ethereum;Curso\n---\n\n\n{% iframe https://buendiadas.github.io/htmlposts/ethereum.html 100% 400px %}\n\n\nDejo a continuación los slides del curso de Ethereum para desarrolladores que se impartió a través de DevAcademy:\n\n\n - [Introducción a Ethereum](https://buendiadas.github.io/htmlposts/ethereum.html): donde se hace una breve introducción a la arquitectura general.\n - [Introduccion a Web3](https://buendiadas.github.io/htmlposts/ethereum.html) en el que se hace una introducción a la librería web3.js\n - [Introducción a Solidity](https://buendiadas.github.io/htmlposts/solidity.html), donde se hacen ejercicios y comienzan a desarrollar Smart Contracts.\n\n\n Las slides están realizadas en abierto a través de la librería [Remarkjs](https://github.com/gnab/remark). Si quieres contribuir, editandolas o majorándolas, PR son bienvenidos. A continuación, el link del repo:\n\n\n https://github.com/buendiadas/curso-ethereum\n","slug":"curso-ethereum","published":1,"updated":"2017-10-08T21:34:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcxdx42y000b1q1ybl65jpb9","content":"<p><iframe src=\"https://buendiadas.github.io/htmlposts/ethereum.html\" width=\"100%\" height=\"400px\" frameborder=\"0\" allowfullscreen></iframe></p>\n<p>Dejo a continuación los slides del curso de Ethereum para desarrolladores que se impartió a través de DevAcademy:</p>\n<ul>\n<li><a href=\"https://buendiadas.github.io/htmlposts/ethereum.html\" target=\"_blank\" rel=\"external\">Introducción a Ethereum</a>: donde se hace una breve introducción a la arquitectura general.</li>\n<li><a href=\"https://buendiadas.github.io/htmlposts/ethereum.html\" target=\"_blank\" rel=\"external\">Introduccion a Web3</a> en el que se hace una introducción a la librería web3.js</li>\n<li><a href=\"https://buendiadas.github.io/htmlposts/solidity.html\" target=\"_blank\" rel=\"external\">Introducción a Solidity</a>, donde se hacen ejercicios y comienzan a desarrollar Smart Contracts.</li>\n</ul>\n<p>Las slides están realizadas en abierto a través de la librería <a href=\"https://github.com/gnab/remark\" target=\"_blank\" rel=\"external\">Remarkjs</a>. Si quieres contribuir, editandolas o majorándolas, PR son bienvenidos. A continuación, el link del repo:</p>\n<p>https://github.com/buendiadas/curso-ethereum</p>\n","site":{"data":{}},"excerpt":"","more":"<p><iframe src=\"https://buendiadas.github.io/htmlposts/ethereum.html\" width=\"100%\" height=\"400px\" frameborder=\"0\" allowfullscreen></iframe></p>\n<p>Dejo a continuación los slides del curso de Ethereum para desarrolladores que se impartió a través de DevAcademy:</p>\n<ul>\n<li><a href=\"https://buendiadas.github.io/htmlposts/ethereum.html\" target=\"_blank\" rel=\"external\">Introducción a Ethereum</a>: donde se hace una breve introducción a la arquitectura general.</li>\n<li><a href=\"https://buendiadas.github.io/htmlposts/ethereum.html\" target=\"_blank\" rel=\"external\">Introduccion a Web3</a> en el que se hace una introducción a la librería web3.js</li>\n<li><a href=\"https://buendiadas.github.io/htmlposts/solidity.html\" target=\"_blank\" rel=\"external\">Introducción a Solidity</a>, donde se hacen ejercicios y comienzan a desarrollar Smart Contracts.</li>\n</ul>\n<p>Las slides están realizadas en abierto a través de la librería <a href=\"https://github.com/gnab/remark\" target=\"_blank\" rel=\"external\">Remarkjs</a>. Si quieres contribuir, editandolas o majorándolas, PR son bienvenidos. A continuación, el link del repo:</p>\n<p>https://github.com/buendiadas/curso-ethereum</p>\n"}],"PostAsset":[{"_id":"source/_posts/curso-ethereum/Title.png","slug":"Title.png","post":"cjcxdx42y000b1q1ybl65jpb9","modified":0,"renderable":0},{"_id":"source/_posts/curso-ethereum/Weather-Sun-icon.png","slug":"Weather-Sun-icon.png","post":"cjcxdx42y000b1q1ybl65jpb9","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"cjcxdx42x000a1q1yv79h8z9y","tag_id":"cjcxdx42o00061q1yfo38k1hr","_id":"cjcxdx430000d1q1ywv5fb26a"},{"post_id":"cjcxdx42i00031q1yijz40kqo","tag_id":"cjcxdx42o00061q1yfo38k1hr","_id":"cjcxdx431000e1q1yobr6cams"},{"post_id":"cjcxdx42m00051q1yxk4uuntd","tag_id":"cjcxdx42z000c1q1yrs0ax39t","_id":"cjcxdx432000g1q1yd9kjuqrn"},{"post_id":"cjcxdx42y000b1q1ybl65jpb9","tag_id":"cjcxdx431000f1q1y23lkbold","_id":"cjcxdx433000h1q1yoeqkkf1y"}],"Tag":[{"name":"ENS,Ethereum,Tutorial","_id":"cjcxdx42o00061q1yfo38k1hr"},{"name":"Identidad,Ethereum,Blockchain","_id":"cjcxdx42z000c1q1yrs0ax39t"},{"name":"Ethereum;Curso","_id":"cjcxdx431000f1q1y23lkbold"}]}}